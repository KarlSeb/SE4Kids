{
  "tests": [
    {
      "name": "Nano starts with costume 'nano-a'",
      "code": "const testNanoStartCostume = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume.name === 'nano-a', 5000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.currentCostume.name, 'nano-a', 'Nano should start with costume nano-a');\n    t.end();\n}"
    },
    {
      "name": "Nano changes to costume 'nano-b' when clicked",
      "code": "const testNanoClickCostumeChange = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume.name === 'nano-a', 5000);\n    t.clickSprite('Nano');\n    await t.runUntil(() => t.getSprite('Nano').currentCostume.name === 'nano-b', 5000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.currentCostume.name, 'nano-b', 'Nano should change to costume nano-b when clicked');\n    t.end();\n}"
    },
    {
      "name": "Stage costume changes to 'space' when Nano is clicked",
      "code": "const testStageCostumeChangeOnNanoClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume.name === 'nano-a', 5000);\n    t.clickSprite('Nano');\n    await t.runUntil(() => t.getStage().currentCostume.name === 'space', 5000);\n    const stage = t.getStage();\n    t.assert.strictEqual(stage.currentCostume.name, 'space', 'Stage costume should change to space when Nano is clicked');\n    t.end();\n}"
    },
    {
      "name": "Nano asks 'What's your name?' when clicked",
      "code": "const testNanoAsksNameOnClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume.name === 'nano-a', 5000);\n    t.clickSprite('Nano');\n    await t.runUntil(() => t.getSprite('Nano').sayText === \"What's your name?\", 5000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, \"What's your name?\", \"Nano should ask 'What's your name?' when clicked\");\n    t.end();\n}"
    },
    {
      "name": "Answer to 'What's your name?' is stored in global variable 'name'",
      "code": "const testAnswerStoredInGlobalVariable = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume.name === 'nano-a', 5000);\n    t.clickSprite('Nano');\n    await t.runUntil(() => t.getSprite('Nano').sayText === \"What's your name?\", 5000);\n    t.typeText('Alice');\n    await t.runForTime(1000);\n    const nameVar = t.getGlobalVariable('name');\n    t.assert.strictEqual(nameVar.value, 'Alice', \"The answer to 'What's your name?' should be stored in the global variable 'name'\");\n    t.end();\n}"
    },
    {
      "name": "Nano says 'Hi [name]' for 2 seconds after answering 'What's your name?'",
      "code": "const testNanoSaysHiAfterNameAnswer = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume.name === 'nano-a', 5000);\n    t.clickSprite('Nano');\n    await t.runUntil(() => t.getSprite('Nano').sayText === \"What's your name?\", 5000);\n    t.typeText('Alice');\n    await t.runForTime(1000);\n    await t.runUntil(() => t.getSprite('Nano').sayText === 'Hi Alice', 5000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, 'Hi Alice', \"Nano should say 'Hi Alice' after answering 'What's your name?'\");\n    await t.runForTime(2000);\n    t.assert.strictEqual(nano.sayText, '', \"Nano should stop saying 'Hi Alice' after 2 seconds\");\n    t.end();\n}"
    },
    {
      "name": "Nano asks 'Are you OK [name]' after saying 'Hi [name]'",
      "code": "const testNanoAsksAreYouOkAfterHi = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume.name === 'nano-a', 5000);\n    t.clickSprite('Nano');\n    await t.runUntil(() => t.getSprite('Nano').sayText === \"What's your name?\", 5000);\n    t.typeText('Alice');\n    await t.runForTime(1000);\n    await t.runUntil(() => t.getSprite('Nano').sayText === 'Hi Alice', 5000);\n    await t.runForTime(2000);\n    await t.runUntil(() => t.getSprite('Nano').sayText === 'Are you OK Alice', 5000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, 'Are you OK Alice', \"Nano should ask 'Are you OK Alice' after saying 'Hi Alice'\");\n    t.end();\n}"
    }
,
    {
      "name": "Test 8: If the answer to 'Are you OK [name]' is 'yes' Nanos costume changes to 'nano-c'",
      "code": "const test8 = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').sayText.includes('Are you OK'));\n    t.typeText('yes');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.equal(nano.getCostumeByIndex(nano.currentCostume).name, 'nano-c', 'Nano should change to costume nano-c');\n    t.end();\n}"
    },
    {
      "name": "Test 9: If the answer to 'Are you OK [name]' is 'yes' Nano says 'That's great to hear!' for 2 seconds",
      "code": "const test9 = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').sayText.includes('Are you OK'));\n    t.typeText('yes');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.equal(nano.sayText, \"That's great to hear!\", \"Nano should say 'That's great to hear!'\");\n    await t.runForTime(2000);\n    t.assert.equal(nano.sayText, '', \"Nano should stop saying 'That's great to hear!' after 2 seconds\");\n    t.end();\n}"
    },
    {
      "name": "Test 10: If the answer to 'Are you OK [name]' is not 'yes' Nanos costume changes to 'nano-d'",
      "code": "const test10 = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').sayText.includes('Are you OK'));\n    t.typeText('no');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.equal(nano.getCostumeByIndex(nano.currentCostume).name, 'nano-d', 'Nano should change to costume nano-d');\n    t.end();\n}"
    },
    {
      "name": "Test 11: If the answer to 'Are you OK [name]' is not 'yes' Nano says 'Oh no!' for 2 seconds, then Nanos costume changes to 'nano-b'",
      "code": "const test11 = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').sayText.includes('Are you OK'));\n    t.typeText('no');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.equal(nano.sayText, 'Oh no!', \"Nano should say 'Oh no!'\");\n    await t.runForTime(2000);\n    t.assert.equal(nano.sayText, '', \"Nano should stop saying 'Oh no!' after 2 seconds\");\n    t.assert.equal(nano.getCostumeByIndex(nano.currentCostume).name, 'nano-b', 'Nano should change to costume nano-b');\n    t.end();\n}"
    },
    {
      "name": "Test 12: Nano then asks 'Do you want to go to the moon?'",
      "code": "const test12 = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').sayText.includes('Do you want to go to the moon?'));\n    const nano = t.getSprite('Nano');\n    t.assert.equal(nano.sayText, 'Do you want to go to the moon?', \"Nano should ask 'Do you want to go to the moon?'\");\n    t.end();\n}"
    },
    {
      "name": "Test 13: If the answer to 'Do you want to go to the moon?' is 'yes' the stage costume changes to 'moon'",
      "code": "const test13 = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').sayText.includes('Do you want to go to the moon?'));\n    t.typeText('yes');\n    await t.runForTime(1000);\n    const stage = t.getStage();\n    t.assert.equal(stage.getCostumeByIndex(stage.currentCostume).name, 'moon', 'Stage should change to costume moon');\n    t.end();\n}"
    },
    {
      "name": "Test 14: If the answer to 'Do you want to go to the moon?' is 'yes' Nano moves up, waits 0.1 seconds, moves down and waits 0.1 seconds for 4 times",
      "code": "const test14 = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').sayText.includes('Do you want to go to the moon?'));\n    t.typeText('yes');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    const initialY = nano.y;\n    for (let i = 0; i < 4; i++) {\n        await t.runForTime(100);\n        t.assert.notEqual(nano.y, initialY, 'Nano should move up');\n        await t.runForTime(100);\n        t.assert.equal(nano.y, initialY, 'Nano should move down');\n    }\n    t.end();\n}"
    }
  ]
}