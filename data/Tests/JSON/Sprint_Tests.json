{
  "tests": [
    {
      "name": "Finish Line has costume 'normal' at the start",
      "code": "const testFinishLineCostume = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Finish Line').getCostumeByName('normal') !== undefined, 5000);\n    const finishLine = t.getSprite('Finish Line');\n    t.assert.strictEqual(finishLine.currentCostume, finishLine.getCostumeByName('normal').index, 'Finish Line should have costume normal at the start');\n    t.end();\n}"
    },
    {
      "name": "Global variable distance is 0 at the start",
      "code": "const testGlobalVariableDistance = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 0, 5000);\n    t.assert.strictEqual(t.getGlobalVariable('distance'), 0, 'Global variable distance should be 0 at the start');\n    t.end();\n}"
    },
    {
      "name": "Global variable time is 0 at the start",
      "code": "const testGlobalVariableTime = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('time') === 0, 5000);\n    t.assert.strictEqual(t.getGlobalVariable('time'), 0, 'Global variable time should be 0 at the start');\n    t.end();\n}"
    },
    {
      "name": "Finish Line has coordinates (0, 30) at the start",
      "code": "const testFinishLineCoordinates = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Finish Line').x === 0 && t.getSprite('Finish Line').y === 30, 5000);\n    const finishLine = t.getSprite('Finish Line');\n    t.assert.strictEqual(finishLine.x, 0, 'Finish Line should have x coordinate 0 at the start');\n    t.assert.strictEqual(finishLine.y, 30, 'Finish Line should have y coordinate 30 at the start');\n    t.end();\n}"
    },
    {
      "name": "Finish Line has size 1 at the start",
      "code": "const testFinishLineSize = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Finish Line').size === 1, 5000);\n    const finishLine = t.getSprite('Finish Line');\n    t.assert.strictEqual(finishLine.size, 1, 'Finish Line should have size 1 at the start');\n    t.end();\n}"
    },
    {
      "name": "Finish Line says a countdown from 3 to 1, with every number showing for 1 second",
      "code": "const testFinishLineCountdown = async function (t) {\n    t.greenFlag();\n    const finishLine = t.getSprite('Finish Line');\n    for (let i = 3; i >= 1; i--) {\n        await t.runUntil(() => finishLine.sayText === i.toString(), 5000);\n        t.assert.strictEqual(finishLine.sayText, i.toString(), `Finish Line should say ${i}`);\n        await t.runForTime(1000);\n    }\n    t.end();\n}"
    },
    {
      "name": "After the countdown is finished the timer increases by 0.1 every 0.1 seconds",
      "code": "const testTimerIncrease = async function (t) {\n    t.greenFlag();\n    await t.runForTime(3000); // Wait for countdown to finish\n    const initialTime = t.getGlobalVariable('time');\n    await t.runForTime(1000);\n    const finalTime = t.getGlobalVariable('time');\n    t.assert.strictEqual(finalTime - initialTime, 1, 'Timer should increase by 0.1 every 0.1 seconds');\n    t.end();\n}"
    },
    {
      "name": "Tree1 is visible at the start",
      "code": "const testTree1Visibility = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Tree1').visible, 5000);\n    const tree1 = t.getSprite('Tree1');\n    t.assert.ok(tree1.visible, 'Tree1 should be visible at the start');\n    t.end();\n}"
    },
    {
      "name": "Tree1 has coordinates (-50, 20) at the start",
      "code": "const testTree1Coordinates = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Tree1').x === -50 && t.getSprite('Tree1').y === 20, 5000);\n    const tree1 = t.getSprite('Tree1');\n    t.assert.strictEqual(tree1.x, -50, 'Tree1 should have x coordinate -50 at the start');\n    t.assert.strictEqual(tree1.y, 20, 'Tree1 should have y coordinate 20 at the start');\n    t.end();\n}"
    },
    {
      "name": "Tree1 has size 1 at the start",
      "code": "const testTree1Size = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Tree1').size === 1, 5000);\n    const tree1 = t.getSprite('Tree1');\n    t.assert.strictEqual(tree1.size, 1, 'Tree1 should have size 1 at the start');\n    t.end();\n}"
    },
    {
      "name": "Until distance is 100 the left arrow key and the right arrow key have to be pressed in an alternating manner to increase distance for every button press",
      "code": "const testDistanceIncreaseWithKeyPress = async function (t) {\n    t.greenFlag();\n    let lastDistance = t.getGlobalVariable('distance');\n    for (let i = 0; i < 50; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n        const currentDistance = t.getGlobalVariable('distance');\n        t.assert.greater(currentDistance, lastDistance, 'Distance should increase with alternating key presses');\n        lastDistance = currentDistance;\n    }\n    t.end();\n}"
    },
    {
      "name": "Every time distance increases the size of Finish Line increases by 1",
      "code": "const testFinishLineSizeIncrease = async function (t) {\n    t.greenFlag();\n    let lastDistance = t.getGlobalVariable('distance');\n    let lastSize = t.getSprite('Finish Line').size;\n    for (let i = 0; i < 50; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n        const currentDistance = t.getGlobalVariable('distance');\n        const currentSize = t.getSprite('Finish Line').size;\n        if (currentDistance > lastDistance) {\n            t.assert.strictEqual(currentSize, lastSize + 1, 'Finish Line size should increase by 1 when distance increases');\n            lastSize = currentSize;\n        }\n        lastDistance = currentDistance;\n    }\n    t.end();\n}"
    },
    {
      "name": "Every time distance increases the size of Tree1 increases by 1",
      "code": "const testTree1SizeIncrease = async function (t) {\n    t.greenFlag();\n    let lastDistance = t.getGlobalVariable('distance');\n    let lastSize = t.getSprite('Tree1').size;\n    for (let i = 0; i < 50; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n        const currentDistance = t.getGlobalVariable('distance');\n        const currentSize = t.getSprite('Tree1').size;\n        if (currentDistance > lastDistance) {\n            t.assert.strictEqual(currentSize, lastSize + 1, 'Tree1 size should increase by 1 when distance increases');\n            lastSize = currentSize;\n        }\n        lastDistance = currentDistance;\n    }\n    t.end();\n}"
    },
    {
      "name": "Every time distance increases the y coordinate of Finish Line decreases by 1.5",
      "code": "const testFinishLineYCoordinateDecrease = async function (t) {\n    t.greenFlag();\n    let lastDistance = t.getGlobalVariable('distance');\n    let lastY = t.getSprite('Finish Line').y;\n    for (let i = 0; i < 50; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n        const currentDistance = t.getGlobalVariable('distance');\n        const currentY = t.getSprite('Finish Line').y;\n        if (currentDistance > lastDistance) {\n            t.assert.strictEqual(currentY, lastY - 1.5, 'Finish Line y coordinate should decrease by 1.5 when distance increases');\n            lastY = currentY;\n        }\n        lastDistance = currentDistance;\n    }\n    t.end();\n}"
    },
    {
      "name": "Every time distance increases the y coordinate of Tree1 decreases by 1.5",
      "code": "const testTree1YCoordinateDecrease = async function (t) {\n    t.greenFlag();\n    let lastDistance = t.getGlobalVariable('distance');\n    let lastY = t.getSprite('Tree1').y;\n    for (let i = 0; i < 50; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n        const currentDistance = t.getGlobalVariable('distance');\n        const currentY = t.getSprite('Tree1').y;\n        if (currentDistance > lastDistance) {\n            t.assert.strictEqual(currentY, lastY - 1.5, 'Tree1 y coordinate should decrease by 1.5 when distance increases');\n            lastY = currentY;\n        }\n        lastDistance = currentDistance;\n    }\n    t.end();\n}"
    },
    {
      "name": "Every time distance increases the x coordinate of Tree1 decreases by 2",
      "code": "const testTree1XCoordinateDecrease = async function (t) {\n    t.greenFlag();\n    let lastDistance = t.getGlobalVariable('distance');\n    let lastX = t.getSprite('Tree1').x;\n    for (let i = 0; i < 50; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n        const currentDistance = t.getGlobalVariable('distance');\n        const currentX = t.getSprite('Tree1').x;\n        if (currentDistance > lastDistance) {\n            t.assert.strictEqual(currentX, lastX - 2, 'Tree1 x coordinate should decrease by 2 when distance increases');\n            lastX = currentX;\n        }\n        lastDistance = currentDistance;\n    }\n    t.end();\n}"
    },
    {
      "name": "After distance reaches 100 Finish Line changes costume to 'broken'",
      "code": "const testFinishLineCostumeChange = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') >= 100, 10000);\n    const finishLine = t.getSprite('Finish Line');\n    await t.runUntil(() => finishLine.getCostumeByName('broken') !== undefined, 5000);\n    t.assert.strictEqual(finishLine.currentCostume, finishLine.getCostumeByName('broken').index, 'Finish Line should change costume to broken after distance reaches 100');\n    t.end();\n}"
    },
    {
      "name": "After distance reaches 100 the game ends",
      "code": "const testGameEnd = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') >= 100, 10000);\n    await t.runForTime(1000);\n    t.assert.fail('Game should end after distance reaches 100');\n    t.end();\n}"
    }
  ]
}