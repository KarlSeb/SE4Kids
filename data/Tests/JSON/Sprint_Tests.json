{
  "tests": [
    {
      "name": "Finish Line has costume 'normal' at start",
      "code": "const testFinishLineCostume = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Finish Line').currentCostume === 0, 5000);\n    const finishLine = t.getSprite('Finish Line');\n    t.assert.strictEqual(finishLine.getCostumeByIndex(finishLine.currentCostume).name, 'normal', 'Finish Line should have costume normal at start');\n    t.end();\n}"
    },
    {
      "name": "Global variable distance is 0 at start",
      "code": "const testGlobalVariableDistance = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 0, 5000);\n    t.assert.strictEqual(t.getGlobalVariable('distance'), 0, 'Global variable distance should be 0 at start');\n    t.end();\n}"
    },
    {
      "name": "Global variable time is 0 at start",
      "code": "const testGlobalVariableTime = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('time') === 0, 5000);\n    t.assert.strictEqual(t.getGlobalVariable('time'), 0, 'Global variable time should be 0 at start');\n    t.end();\n}"
    },
    {
      "name": "Finish Line has coordinates (0, 30) at start",
      "code": "const testFinishLineCoordinates = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Finish Line').x === 0 && t.getSprite('Finish Line').y === 30, 5000);\n    const finishLine = t.getSprite('Finish Line');\n    t.assert.strictEqual(finishLine.x, 0, 'Finish Line should have x coordinate 0 at start');\n    t.assert.strictEqual(finishLine.y, 30, 'Finish Line should have y coordinate 30 at start');\n    t.end();\n}"
    },
    {
      "name": "Finish Line has size 1 at start",
      "code": "const testFinishLineSize = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Finish Line').size === 1, 5000);\n    t.assert.strictEqual(t.getSprite('Finish Line').size, 1, 'Finish Line should have size 1 at start');\n    t.end();\n}"
    },
    {
      "name": "Finish Line says countdown from 3 to 1 at start",
      "code": "const testFinishLineCountdown = async function (t) {\n    t.greenFlag();\n    const finishLine = t.getSprite('Finish Line');\n    await t.runUntil(() => finishLine.sayText === '3', 5000);\n    t.assert.strictEqual(finishLine.sayText, '3', 'Finish Line should say 3 at start');\n    await t.runForTime(1000);\n    t.assert.strictEqual(finishLine.sayText, '2', 'Finish Line should say 2 after 1 second');\n    await t.runForTime(1000);\n    t.assert.strictEqual(finishLine.sayText, '1', 'Finish Line should say 1 after 2 seconds');\n    await t.runForTime(1000);\n    t.assert.strictEqual(finishLine.sayText, '', 'Finish Line should stop saying after countdown');\n    t.end();\n}"
    },
    {
      "name": "Timer increases by 0.1 every 0.1 seconds after countdown",
      "code": "const testTimerIncreases = async function (t) {\n    t.greenFlag();\n    await t.runForTime(3000); // Wait for countdown to finish\n    const initialTime = t.getGlobalVariable('time');\n    await t.runForTime(100);\n    t.assert.strictEqual(t.getGlobalVariable('time'), initialTime + 0.1, 'Timer should increase by 0.1 every 0.1 seconds');\n    t.end();\n}"
    },
    {
      "name": "Tree1 is visible at start",
      "code": "const testTree1Visible = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Tree1').visible, 5000);\n    t.assert.ok(t.getSprite('Tree1').visible, 'Tree1 should be visible at start');\n    t.end();\n}"
    },
    {
      "name": "Tree1 has coordinates (-50, 20) at start",
      "code": "const testTree1Coordinates = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Tree1').x === -50 && t.getSprite('Tree1').y === 20, 5000);\n    const tree1 = t.getSprite('Tree1');\n    t.assert.strictEqual(tree1.x, -50, 'Tree1 should have x coordinate -50 at start');\n    t.assert.strictEqual(tree1.y, 20, 'Tree1 should have y coordinate 20 at start');\n    t.end();\n}"
    },
    {
      "name": "Tree1 has size 1 at start",
      "code": "const testTree1Size = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Tree1').size === 1, 5000);\n    t.assert.strictEqual(t.getSprite('Tree1').size, 1, 'Tree1 should have size 1 at start');\n    t.end();\n}"
    },
    {
      "name": "Left and right arrow keys increase distance until 100",
      "code": "const testArrowKeysIncreaseDistance = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 0, 5000);\n    for (let i = 0; i < 50; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n    }\n    t.assert.strictEqual(t.getGlobalVariable('distance'), 100, 'Distance should be 100 after alternating key presses');\n    t.end();\n}"
    },
    {
      "name": "Finish Line size increases by 1 every time distance increases",
      "code": "const testFinishLineSizeIncrease = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 0, 5000);\n    const initialSize = t.getSprite('Finish Line').size;\n    for (let i = 0; i < 10; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n    }\n    t.assert.strictEqual(t.getSprite('Finish Line').size, initialSize + 10, 'Finish Line size should increase by 1 every time distance increases');\n    t.end();\n}"
    },
    {
      "name": "Tree1 size increases by 1 every time distance increases",
      "code": "const testTree1SizeIncrease = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 0, 5000);\n    const initialSize = t.getSprite('Tree1').size;\n    for (let i = 0; i < 10; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n    }\n    t.assert.strictEqual(t.getSprite('Tree1').size, initialSize + 10, 'Tree1 size should increase by 1 every time distance increases');\n    t.end();\n}"
    },
    {
      "name": "Finish Line y coordinate decreases by 1.5 every time distance increases",
      "code": "const testFinishLineYCoordinateDecrease = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 0, 5000);\n    const initialY = t.getSprite('Finish Line').y;\n    for (let i = 0; i < 10; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n    }\n    t.assert.strictEqual(t.getSprite('Finish Line').y, initialY - 15, 'Finish Line y coordinate should decrease by 1.5 every time distance increases');\n    t.end();\n}"
    },
    {
      "name": "Tree1 y coordinate decreases by 1.5 every time distance increases",
      "code": "const testTree1YCoordinateDecrease = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 0, 5000);\n    const initialY = t.getSprite('Tree1').y;\n    for (let i = 0; i < 10; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n    }\n    t.assert.strictEqual(t.getSprite('Tree1').y, initialY - 15, 'Tree1 y coordinate should decrease by 1.5 every time distance increases');\n    t.end();\n}"
    },
    {
      "name": "Tree1 x coordinate decreases by 2 every time distance increases",
      "code": "const testTree1XCoordinateDecrease = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 0, 5000);\n    const initialX = t.getSprite('Tree1').x;\n    for (let i = 0; i < 10; i++) {\n        t.keyPress('left arrow');\n        await t.runForTime(100);\n        t.keyRelease('left arrow');\n        await t.runForTime(100);\n        t.keyPress('right arrow');\n        await t.runForTime(100);\n        t.keyRelease('right arrow');\n        await t.runForTime(100);\n    }\n    t.assert.strictEqual(t.getSprite('Tree1').x, initialX - 20, 'Tree1 x coordinate should decrease by 2 every time distance increases');\n    t.end();\n}"
    },
    {
      "name": "Finish Line changes costume to 'broken' after distance reaches 100",
      "code": "const testFinishLineCostumeChange = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 100, 10000);\n    const finishLine = t.getSprite('Finish Line');\n    t.assert.strictEqual(finishLine.getCostumeByIndex(finishLine.currentCostume).name, 'broken', 'Finish Line should change costume to broken after distance reaches 100');\n    t.end();\n}"
    },
    {
      "name": "Game ends after distance reaches 100",
      "code": "const testGameEnds = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('distance') === 100, 10000);\n    await t.runForTime(1000);\n    t.assert.fail('Game should end after distance reaches 100');\n    t.end();\n}"
    }
  ]
}