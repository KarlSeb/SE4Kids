{
  "tests": [
    {
      "name": "The time variable of the stage starts at 0",
      "code": "const testTimeStartsAtZero = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('time') === 0, 1000);\n    t.assert.equal(t.getGlobalVariable('time'), 0, 'Time variable should start at 0');\n    t.end();\n}"
    },
    {
      "name": "The time variable increases by 0.1 every 0.1 seconds",
      "code": "const testTimeIncreases = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.assert.greater(t.getGlobalVariable('time'), 0, 'Time variable should increase');\n    t.end();\n}"
    },
    {
      "name": "The gate direction changes constantly",
      "code": "const testGateDirectionChanges = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const gate = t.getSprite('gate');\n    let initialDirection = gate.direction;\n    await t.runForTime(1000);\n    t.assert.notEqual(gate.direction, initialDirection, 'Gate direction should change');\n    t.end();\n}"
    },
    {
      "name": "The boat starts with the costume 'normal'",
      "code": "const testBoatStartsWithNormalCostume = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.getCostumeByName('normal') !== undefined, 1000);\n    t.assert.equal(boat.currentCostume, boat.getCostumeByName('normal').index, 'Boat should start with costume normal');\n    t.end();\n}"
    },
    {
      "name": "The boat starts with the direction 0",
      "code": "const testBoatStartsWithDirectionZero = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.direction === 0, 1000);\n    t.assert.equal(boat.direction, 0, 'Boat should start with direction 0');\n    t.end();\n}"
    },
    {
      "name": "The boat starts at coordinates (-190, -150)",
      "code": "const testBoatStartsAtCoordinates = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.x === -190 && boat.y === -150, 1000);\n    t.assert.equal(boat.x, -190, 'Boat should start at x coordinate -190');\n    t.assert.equal(boat.y, -150, 'Boat should start at y coordinate -150');\n    t.end();\n}"
    },
    {
      "name": "If the boat touches the color [102, 59, 0] the costume changes to 'hit'",
      "code": "const testBoatTouchesColorChangesCostume = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.isTouchingColor([102, 59, 0]), 1000);\n    await t.runForTime(100);\n    t.assert.equal(boat.currentCostume, boat.getCostumeByName('hit').index, 'Boat costume should change to hit');\n    t.end();\n}"
    },
    {
      "name": "If the boat touches the color [102, 59, 0] the boat says 'Noooooo!' for 1 second",
      "code": "const testBoatTouchesColorSaysNoooooo = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.isTouchingColor([102, 59, 0]), 1000);\n    await t.runForTime(100);\n    t.assert.equal(boat.sayText, 'Noooooo!', 'Boat should say Noooooo!');\n    await t.runForTime(1000);\n    t.assert.equal(boat.sayText, '', 'Boat should stop saying Noooooo! after 1 second');\n    t.end();\n}"
    },
    {
      "name": "After the boat says 'Noooooo!' for 1 second the boat is reset to starting conditions",
      "code": "const testBoatResetsAfterNoooooo = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.isTouchingColor([102, 59, 0]), 1000);\n    await t.runForTime(1100);\n    t.assert.equal(boat.x, -190, 'Boat should reset to x coordinate -190');\n    t.assert.equal(boat.y, -150, 'Boat should reset to y coordinate -150');\n    t.assert.equal(boat.direction, 0, 'Boat should reset to direction 0');\n    t.assert.equal(boat.currentCostume, boat.getCostumeByName('normal').index, 'Boat should reset to costume normal');\n    t.end();\n}"
    },
    {
      "name": "If the boat touches the color [255, 255, 255] the boat moves by 3 steps",
      "code": "const testBoatMovesOnWhite = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.isTouchingColor([255, 255, 255]), 1000);\n    const initialX = boat.x;\n    const initialY = boat.y;\n    await t.runForTime(100);\n    t.assert.notEqual(boat.x, initialX, 'Boat should move on white color');\n    t.assert.notEqual(boat.y, initialY, 'Boat should move on white color');\n    t.end();\n}"
    },
    {
      "name": "If the boat touches the color [255, 255, 153] the boat stops moving",
      "code": "const testBoatStopsOnYellow = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.isTouchingColor([255, 255, 153]), 1000);\n    const initialX = boat.x;\n    const initialY = boat.y;\n    await t.runForTime(100);\n    t.assert.equal(boat.x, initialX, 'Boat should stop moving on yellow color');\n    t.assert.equal(boat.y, initialY, 'Boat should stop moving on yellow color');\n    t.end();\n}"
    },
    {
      "name": "If the boat touches the color [255, 255, 153] the boat says 'YEAH!' for 1 second",
      "code": "const testBoatSaysYeahOnYellow = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.isTouchingColor([255, 255, 153]), 1000);\n    await t.runForTime(100);\n    t.assert.equal(boat.sayText, 'YEAH!', 'Boat should say YEAH!');\n    await t.runForTime(1000);\n    t.assert.equal(boat.sayText, '', 'Boat should stop saying YEAH! after 1 second');\n    t.end();\n}"
    },
    {
      "name": "If the boat touches the color [255, 255, 153] the program ends",
      "code": "const testProgramEndsOnYellow = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runUntil(() => boat.isTouchingColor([255, 255, 153]), 1000);\n    await t.runForTime(100);\n    t.assert.fail('Program should end');\n    t.end();\n}"
    },
    {
      "name": "If the boat's distance to the mouse pointer is greater than 5 the boat makes 1 step in the direction of the mouse pointer",
      "code": "const testBoatMovesTowardsMouse = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    await t.runForTime(100);\n    const initialX = boat.x;\n    const initialY = boat.y;\n    t.mouseMove(100, 100, 10);\n    await t.runForTime(100);\n    t.assert.notEqual(boat.x, initialX, 'Boat should move towards mouse');\n    t.assert.notEqual(boat.y, initialY, 'Boat should move towards mouse');\n    t.end();\n}"
    },
    {
      "name": "If the boat's distance to the mouse pointer is less than 5 the boat stops moving",
      "code": "const testBoatStopsNearMouse = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const boat = t.getSprite('boat');\n    t.mouseMove(boat.x + 4, boat.y + 4, 10);\n    await t.runForTime(100);\n    const initialX = boat.x;\n    const initialY = boat.y;\n    await t.runForTime(100);\n    t.assert.equal(boat.x, initialX, 'Boat should stop near mouse');\n    t.assert.equal(boat.y, initialY, 'Boat should stop near mouse');\n    t.end();\n}"
    }
  ]
}