{
  "tests": [
    {
      "name": "At the start of a round the global variable power is 0",
      "code": "const testPowerAtStart = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('power') === 0, 5000);\n    t.assert.equal(t.getGlobalVariable('power'), 0, 'Power should be 0 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has coordinates (-200, -130)",
      "code": "const testSnowballCoordinatesAtStart = async function (t) {\n    t.greenFlag();\n    const snowball = await t.runUntil(() => {\n        const s = t.getSprite('Snowball');\n        return s.x === -200 && s.y === -130;\n    }, 5000);\n    t.assert.equal(snowball.x, -200, 'Snowball x coordinate should be -200 at the start of a round');\n    t.assert.equal(snowball.y, -130, 'Snowball y coordinate should be -130 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has direction 90",
      "code": "const testSnowballDirectionAtStart = async function (t) {\n    t.greenFlag();\n    const snowball = await t.runUntil(() => t.getSprite('Snowball').direction === 90, 5000);\n    t.assert.equal(snowball.direction, 90, 'Snowball direction should be 90 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has costume 'snowball-aim'",
      "code": "const testSnowballCostumeAtStart = async function (t) {\n    t.greenFlag();\n    const snowball = await t.runUntil(() => t.getSprite('Snowball').getCostumeByName('snowball-aim'), 5000);\n    t.assert.equal(snowball.getCostumeByName('snowball-aim').name, 'snowball-aim', 'Snowball should have costume \"snowball-aim\" at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball is visible",
      "code": "const testSnowballVisibilityAtStart = async function (t) {\n    t.greenFlag();\n    const snowball = await t.runUntil(() => t.getSprite('Snowball').visible, 5000);\n    t.assert.ok(snowball.visible, 'Snowball should be visible at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "Until mouse is down Snowball points towards the mouse pointer",
      "code": "const testSnowballPointsTowardsMouse = async function (t) {\n    t.greenFlag();\n    t.addConstraint(async () => {\n        const snowball = t.getSprite('Snowball');\n        const mousePos = t.getMousePos();\n        t.assert.equal(snowball.direction, Math.atan2(mousePos.y - snowball.y, mousePos.x - snowball.x) * 180 / Math.PI, 'Snowball should point towards the mouse pointer');\n    });\n    await t.runUntil(() => t.isMouseDown(), 10000);\n    t.end();\n}"
    },
    {
      "name": "While mouse is down and while power is less than 20 the direction of Snowball points towards the mouse pointer",
      "code": "const testSnowballDirectionWhileMouseDown = async function (t) {\n    t.greenFlag();\n    t.mouseDown(true);\n    t.addConstraint(async () => {\n        const snowball = t.getSprite('Snowball');\n        const mousePos = t.getMousePos();\n        const power = t.getGlobalVariable('power');\n        if (power < 20) {\n            t.assert.equal(snowball.direction, Math.atan2(mousePos.y - snowball.y, mousePos.x - snowball.x) * 180 / Math.PI, 'Snowball should point towards the mouse pointer while power is less than 20');\n        }\n    });\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    t.end();\n}"
    },
    {
      "name": "While mouse is down and while power is less than 20 power increases by 1",
      "code": "const testPowerIncreaseWhileMouseDown = async function (t) {\n    t.greenFlag();\n    t.mouseDown(true);\n    let previousPower = t.getGlobalVariable('power');\n    t.addConstraint(async () => {\n        const currentPower = t.getGlobalVariable('power');\n        if (currentPower < 20) {\n            t.assert.equal(currentPower, previousPower + 1, 'Power should increase by 1 while mouse is down and power is less than 20');\n            previousPower = currentPower;\n        }\n    });\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    t.end();\n}"
    },
    {
      "name": "After mouse is released Snowball switches to costume 'snowball'",
      "code": "const testSnowballCostumeAfterMouseRelease = async function (t) {\n    t.greenFlag();\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    const snowball = await t.runUntil(() => t.getSprite('Snowball').getCostumeByName('snowball'), 5000);\n    t.assert.equal(snowball.getCostumeByName('snowball').name, 'snowball', 'Snowball should switch to costume \"snowball\" after mouse is released');\n    t.end();\n}"
    },
    {
      "name": "Until Snowball touches the edge of the stage or Rocks the y coordinate is changed by -5",
      "code": "const testSnowballYCoordinateChange = async function (t) {\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    let previousY = snowball.y;\n    t.addConstraint(async () => {\n        if (!snowball.isTouchingSprite('Rocks') && !snowball.isTouchingEdge()) {\n            t.assert.equal(snowball.y, previousY - 5, 'Snowball y coordinate should change by -5 until it touches the edge or Rocks');\n            previousY = snowball.y;\n        }\n    });\n    await t.runUntil(() => snowball.isTouchingSprite('Rocks') || snowball.isTouchingEdge(), 10000);\n    t.end();\n}"
    },
    {
      "name": "Until Snowball touches the edge of the stage or Rocks Snowball moves power steps",
      "code": "const testSnowballMovesPowerSteps = async function (t) {\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    const initialX = snowball.x;\n    const initialY = snowball.y;\n    const power = t.getGlobalVariable('power');\n    await t.runUntil(() => snowball.isTouchingSprite('Rocks') || snowball.isTouchingEdge(), 10000);\n    const distanceMoved = Math.sqrt(Math.pow(snowball.x - initialX, 2) + Math.pow(snowball.y - initialY, 2));\n    t.assert.equal(distanceMoved, power, 'Snowball should move power steps until it touches the edge or Rocks');\n    t.end();\n}"
    },
    {
      "name": "After moving power steps power is decreased by 0.25",
      "code": "const testPowerDecreaseAfterMoving = async function (t) {\n    t.greenFlag();\n    const initialPower = t.getGlobalVariable('power');\n    await t.runUntil(() => t.getGlobalVariable('power') < initialPower, 10000);\n    t.assert.equal(t.getGlobalVariable('power'), initialPower - 0.25, 'Power should decrease by 0.25 after moving power steps');\n    t.end();\n}"
    },
    {
      "name": "After Snowball touches the edge of the stage or Rocks it gets invisible",
      "code": "const testSnowballInvisibilityAfterTouchingEdgeOrRocks = async function (t) {\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    await t.runUntil(() => snowball.isTouchingSprite('Rocks') || snowball.isTouchingEdge(), 10000);\n    await t.runUntil(() => !snowball.visible, 5000);\n    t.assert.not(snowball.visible, 'Snowball should get invisible after touching the edge or Rocks');\n    t.end();\n}"
    },
    {
      "name": "After Snowball touches the edge of the stage or Rocks a new round starts",
      "code": "const testNewRoundAfterTouchingEdgeOrRocks = async function (t) {\n    t.greenFlag();\n    const initialRound = t.getGlobalVariable('round');\n    const snowball = t.getSprite('Snowball');\n    await t.runUntil(() => snowball.isTouchingSprite('Rocks') || snowball.isTouchingEdge(), 10000);\n    await t.runUntil(() => t.getGlobalVariable('round') > initialRound, 5000);\n    t.assert.greater(t.getGlobalVariable('round'), initialRound, 'A new round should start after Snowball touches the edge or Rocks');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Reindeer goes to a random x coordinate between 0 and 200",
      "code": "const testReindeerRandomXCoordinateAtStart = async function (t) {\n    t.greenFlag();\n    const reindeer = await t.runUntil(() => {\n        const r = t.getSprite('Reindeer');\n        return r.x >= 0 && r.x <= 200;\n    }, 5000);\n    t.assert.greaterOrEqual(reindeer.x, 0, 'Reindeer x coordinate should be at least 0 at the start of a round');\n    t.assert.lessOrEqual(reindeer.x, 200, 'Reindeer x coordinate should be at most 200 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "If Snowball touches Reindeer, Reindeer says 'You got me!' for 2 seconds",
      "code": "const testReindeerSaysYouGotMe = async function (t) {\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    const reindeer = t.getSprite('Reindeer');\n    await t.runUntil(() => snowball.isTouchingSprite('Reindeer'), 10000);\n    await t.runUntil(() => reindeer.sayText === 'You got me!', 5000);\n    t.assert.equal(reindeer.sayText, 'You got me!', 'Reindeer should say \"You got me!\" for 2 seconds if Snowball touches it');\n    t.end();\n}"
    }
  ]
}