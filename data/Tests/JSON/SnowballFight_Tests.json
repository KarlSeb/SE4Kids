{
  "tests": [
    {
      "name": "At the start of a round the global variable power is 0",
      "code": "const testGlobalVariablePower = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('power') === 0, 5000);\n    t.assert.equal(t.getGlobalVariable('power'), 0, 'Global variable power should be 0 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has coordinates (-200, -130)",
      "code": "const testSnowballCoordinates = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => {\n        const snowball = t.getSprite('Snowball');\n        return snowball.x === -200 && snowball.y === -130;\n    }, 5000);\n    const snowball = t.getSprite('Snowball');\n    t.assert.equal(snowball.x, -200, 'Snowball should have x coordinate -200 at the start of a round');\n    t.assert.equal(snowball.y, -130, 'Snowball should have y coordinate -130 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has direction 90",
      "code": "const testSnowballDirection = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Snowball').direction === 90, 5000);\n    t.assert.equal(t.getSprite('Snowball').direction, 90, 'Snowball should have direction 90 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has costume 'snowball-aim'",
      "code": "const testSnowballCostume = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Snowball').getCostumeByName('snowball-aim') !== undefined, 5000);\n    t.assert.equal(t.getSprite('Snowball').getCostumeByName('snowball-aim').name, 'snowball-aim', 'Snowball should have costume \"snowball-aim\" at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball is visible",
      "code": "const testSnowballVisibility = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Snowball').visible, 5000);\n    t.assert.ok(t.getSprite('Snowball').visible, 'Snowball should be visible at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "Until mouse is down Snowball points towards the mouse pointer",
      "code": "const testSnowballPointsTowardsMouse = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => !t.isMouseDown(), 5000);\n    t.addConstraint(() => {\n        const snowball = t.getSprite('Snowball');\n        const mousePos = t.getMousePos();\n        const angle = Math.atan2(mousePos.y - snowball.y, mousePos.x - snowball.x) * 180 / Math.PI;\n        t.assert.equal(snowball.direction, angle, 'Snowball should point towards the mouse pointer until mouse is down');\n    });\n    t.end();\n}"
    },
    {
      "name": "While mouse is down and while power is less than 20 the direction of Snowball points towards the mouse pointer",
      "code": "const testSnowballDirectionWhileMouseDown = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 5000);\n    t.addConstraint(() => {\n        const snowball = t.getSprite('Snowball');\n        const mousePos = t.getMousePos();\n        const angle = Math.atan2(mousePos.y - snowball.y, mousePos.x - snowball.x) * 180 / Math.PI;\n        t.assert.equal(snowball.direction, angle, 'Snowball should point towards the mouse pointer while mouse is down and power is less than 20');\n    });\n    t.end();\n}"
    },
    {
      "name": "While mouse is down and while power is less than 20 power increases in steps of 1",
      "code": "const testPowerIncreaseWhileMouseDown = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    t.mouseDown(true);\n    let previousPower = t.getGlobalVariable('power');\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 5000);\n    t.addConstraint(() => {\n        const currentPower = t.getGlobalVariable('power');\n        t.assert.equal(currentPower, previousPower + 1, 'Power should increase in steps of 1 while mouse is down and power is less than 20');\n        previousPower = currentPower;\n    });\n    t.end();\n}"
    },
    {
      "name": "After mouse is released Snowball switches to costume 'snowball'",
      "code": "const testSnowballCostumeAfterMouseRelease = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 5000);\n    t.mouseDown(false);\n    await t.runUntil(() => t.getSprite('Snowball').getCostumeByName('snowball') !== undefined, 5000);\n    t.assert.equal(t.getSprite('Snowball').getCostumeByName('snowball').name, 'snowball', 'Snowball should switch to costume \"snowball\" after mouse is released');\n    t.end();\n}"
    },
    {
      "name": "Until Snowball touches the edge of the stage or Rocks the y coordinate is changed in steps of -5",
      "code": "const testSnowballYCoordinateChange = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    let previousY = snowball.y;\n    t.addConstraint(() => {\n        if (!snowball.isTouchingSprite('Rocks') && !snowball.isTouchingEdge()) {\n            t.assert.equal(snowball.y, previousY - 5, 'Snowball y coordinate should change in steps of -5 until it touches the edge of the stage or Rocks');\n            previousY = snowball.y;\n        }\n    });\n    t.end();\n}"
    },
    {
      "name": "Until Snowball touches the edge of the stage or Rocks Snowball moves power steps",
      "code": "const testSnowballMovesPowerSteps = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    const initialX = snowball.x;\n    const initialY = snowball.y;\n    const power = t.getGlobalVariable('power');\n    await t.runUntil(() => snowball.isTouchingSprite('Rocks') || snowball.isTouchingEdge(), 5000);\n    const distanceMoved = Math.sqrt(Math.pow(snowball.x - initialX, 2) + Math.pow(snowball.y - initialY, 2));\n    t.assert.equal(distanceMoved, power, 'Snowball should move power steps until it touches the edge of the stage or Rocks');\n    t.end();\n}"
    },
    {
      "name": "After moving power steps power is decreased in steps of 0.25",
      "code": "const testPowerDecreaseAfterMoving = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const initialPower = t.getGlobalVariable('power');\n    await t.runUntil(() => t.getGlobalVariable('power') < initialPower, 5000);\n    t.addConstraint(() => {\n        const currentPower = t.getGlobalVariable('power');\n        t.assert.equal(currentPower, initialPower - 0.25, 'Power should decrease in steps of 0.25 after moving power steps');\n    });\n    t.end();\n}"
    },
    {
      "name": "After Snowball touches the edge of the stage or Rocks it gets invisible",
      "code": "const testSnowballInvisibilityAfterTouchingEdgeOrRocks = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    await t.runUntil(() => snowball.isTouchingSprite('Rocks') || snowball.isTouchingEdge(), 5000);\n    await t.runUntil(() => !snowball.visible, 5000);\n    t.assert.not(snowball.visible, 'Snowball should get invisible after touching the edge of the stage or Rocks');\n    t.end();\n}"
    },
    {
      "name": "After Snowball touches the edge of the stage or Rocks a new round starts",
      "code": "const testNewRoundAfterTouchingEdgeOrRocks = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    await t.runUntil(() => snowball.isTouchingSprite('Rocks') || snowball.isTouchingEdge(), 5000);\n    await t.runUntil(() => t.getGlobalVariable('power') === 0, 5000);\n    t.assert.equal(t.getGlobalVariable('power'), 0, 'A new round should start after Snowball touches the edge of the stage or Rocks');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Reindeer goes to a random x coordinate between 0 and 200",
      "code": "const testReindeerRandomXCoordinate = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => {\n        const reindeer = t.getSprite('Reindeer');\n        return reindeer.x >= 0 && reindeer.x <= 200;\n    }, 5000);\n    const reindeer = t.getSprite('Reindeer');\n    t.assert.greaterOrEqual(reindeer.x, 0, 'Reindeer x coordinate should be greater or equal to 0 at the start of a round');\n    t.assert.lessOrEqual(reindeer.x, 200, 'Reindeer x coordinate should be less or equal to 200 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "If Snowball touches Reindeer, Reindeer says 'You got me!' for 2 seconds",
      "code": "const testReindeerSaysYouGotMe = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const snowball = t.getSprite('Snowball');\n    const reindeer = t.getSprite('Reindeer');\n    await t.runUntil(() => snowball.isTouchingSprite('Reindeer'), 5000);\n    await t.runUntil(() => reindeer.sayText === 'You got me!', 2000);\n    t.assert.equal(reindeer.sayText, 'You got me!', 'Reindeer should say \"You got me!\" for 2 seconds if Snowball touches it');\n    t.end();\n}"
    }
  ]
}