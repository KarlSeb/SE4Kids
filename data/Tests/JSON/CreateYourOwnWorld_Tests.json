{
  "tests": [
    {
      "name": "Global variable coins is 0 at the start",
      "code": "const testGlobalVariableCoins = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('coins') === 0, 5000);\n    t.assert.strictEqual(t.getGlobalVariable('coins'), 0, 'Global variable coins should be 0 at the start');\n    t.end();\n}"
    },
    {
      "name": "List 'inventory' is empty at the start",
      "code": "const testInventoryListEmpty = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('inventory').length === 0, 5000);\n    t.assert.strictEqual(t.getGlobalVariable('inventory').length, 0, \"List 'inventory' should be empty at the start\");\n    t.end();\n}"
    },
    {
      "name": "Global variable room is '1' at the start",
      "code": "const testGlobalVariableRoom = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('room') === '1', 5000);\n    t.assert.strictEqual(t.getGlobalVariable('room'), '1', 'Global variable room should be 1 at the start');\n    t.end();\n}"
    },
    {
      "name": "Player is at coordinates (-200, 0) at the start",
      "code": "const testPlayerStartCoordinates = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = await t.runUntil(() => {\n        const p = t.getSprite('player');\n        return p.x === -200 && p.y === 0;\n    }, 5000);\n    t.assert.strictEqual(player.x, -200, 'Player should start at x = -200');\n    t.assert.strictEqual(player.y, 0, 'Player should start at y = 0');\n    t.end();\n}"
    },
    {
      "name": "Stage has costume 'room1' at the start",
      "code": "const testStageCostume = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = await t.runUntil(() => t.getStage().currentCostume === 'room1', 5000);\n    t.assert.strictEqual(stage.currentCostume, 'room1', 'Stage should have costume room1 at the start');\n    t.end();\n}"
    },
    {
      "name": "Player moves in the respective direction when an arrow key is pressed unless they touch the edge of the stage or the color [178, 178, 178]",
      "code": "const testPlayerMovement = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = t.getSprite('player');\n    const initialX = player.x;\n    const initialY = player.y;\n\n    t.keyPress('right');\n    await t.runForTime(1000);\n    t.assert.ok(player.x > initialX, 'Player should move right when right arrow key is pressed');\n\n    t.keyPress('left');\n    await t.runForTime(1000);\n    t.assert.ok(player.x < initialX, 'Player should move left when left arrow key is pressed');\n\n    t.keyPress('up');\n    await t.runForTime(1000);\n    t.assert.ok(player.y > initialY, 'Player should move up when up arrow key is pressed');\n\n    t.keyPress('down');\n    await t.runForTime(1000);\n    t.assert.ok(player.y < initialY, 'Player should move down when down arrow key is pressed');\n\n    t.end();\n}"
    },
    {
      "name": "Stage costume changes to 'room2' when player is at the center of the right edge of the stage in 'room1' and touches the color [240, 152, 65]",
      "code": "const testStageCostumeChangeRoom1ToRoom2 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = t.getSprite('player');\n    const stage = t.getStage();\n\n    player.x = 240;\n    player.y = 0;\n    await t.runUntil(() => player.isTouchingColor([240, 152, 65]), 5000);\n    t.assert.strictEqual(stage.currentCostume, 'room2', 'Stage costume should change to room2');\n    t.end();\n}"
    },
    {
      "name": "Stage costume changes to 'room3' when player is at the center of the right edge of the stage in 'room2' and touches the color [240, 152, 65]",
      "code": "const testStageCostumeChangeRoom2ToRoom3 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = t.getSprite('player');\n    const stage = t.getStage();\n\n    player.x = 240;\n    player.y = 0;\n    await t.runUntil(() => player.isTouchingColor([240, 152, 65]), 5000);\n    t.assert.strictEqual(stage.currentCostume, 'room3', 'Stage costume should change to room3');\n    t.end();\n}"
    },
    {
      "name": "Stage costume changes to 'room1' when player is at the center of the left edge of the stage in 'room2' and touches the color [254, 248, 85]",
      "code": "const testStageCostumeChangeRoom2ToRoom1 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = t.getSprite('player');\n    const stage = t.getStage();\n\n    player.x = -240;\n    player.y = 0;\n    await t.runUntil(() => player.isTouchingColor([254, 248, 85]), 5000);\n    t.assert.strictEqual(stage.currentCostume, 'room1', 'Stage costume should change to room1');\n    t.end();\n}"
    },
    {
      "name": "Stage costume changes to 'room2' when player is at the center of the left edge of the stage in 'room3' and touches the color [254, 248, 85]",
      "code": "const testStageCostumeChangeRoom3ToRoom2 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = t.getSprite('player');\n    const stage = t.getStage();\n\n    player.x = -240;\n    player.y = 0;\n    await t.runUntil(() => player.isTouchingColor([254, 248, 85]), 5000);\n    t.assert.strictEqual(stage.currentCostume, 'room2', 'Stage costume should change to room2');\n    t.end();\n}"
    },
    {
      "name": "Room increases by 1 when player touches the color [240, 152, 65]",
      "code": "const testRoomIncreasesBy1 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = t.getSprite('player');\n    const initialRoom = t.getGlobalVariable('room');\n\n    player.x = 240;\n    player.y = 0;\n    await t.runUntil(() => player.isTouchingColor([240, 152, 65]), 5000);\n    t.assert.strictEqual(t.getGlobalVariable('room'), initialRoom + 1, 'Room should increase by 1');\n    t.end();\n}"
    },
    {
      "name": "Room decreases by 1 when player touches the color [254, 248, 85]",
      "code": "const testRoomDecreasesBy1 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = t.getSprite('player');\n    const initialRoom = t.getGlobalVariable('room');\n\n    player.x = -240;\n    player.y = 0;\n    await t.runUntil(() => player.isTouchingColor([254, 248, 85]), 5000);\n    t.assert.strictEqual(t.getGlobalVariable('room'), initialRoom - 1, 'Room should decrease by 1');\n    t.end();\n}"
    },
    {
      "name": "Welcome sign is only visible if room is 1 and says 'Welcome! Can you get to the treasure?' when player is touching it, otherwise it says ''",
      "code": "const testWelcomeSignVisibilityAndText = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const welcomeSign = t.getSprite('welcome sign');\n\n    await t.runUntil(() => t.getGlobalVariable('room') === '1', 5000);\n    t.assert.ok(welcomeSign.visible, 'Welcome sign should be visible in room 1');\n\n    t.dragSprite('player', welcomeSign.x, welcomeSign.y);\n    await t.runForTime(1000);\n    t.assert.strictEqual(welcomeSign.sayText, 'Welcome! Can you get to the treasure?', 'Welcome sign should say the welcome message when player is touching it');\n\n    t.dragSprite('player', welcomeSign.x + 50, welcomeSign.y + 50);\n    await t.runForTime(1000);\n    t.assert.strictEqual(welcomeSign.sayText, '', 'Welcome sign should say nothing when player is not touching it');\n\n    t.end();\n}"
    },
    {
      "name": "Coin is only visible if room is '1', increases coins by 1 when player touches it, and becomes invisible after being touched",
      "code": "const testCoinVisibilityAndCollection = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const coin = t.getSprite('coin');\n    const initialCoins = t.getGlobalVariable('coins');\n\n    await t.runUntil(() => t.getGlobalVariable('room') === '1', 5000);\n    t.assert.ok(coin.visible, 'Coin should be visible in room 1');\n\n    t.dragSprite('player', coin.x, coin.y);\n    await t.runForTime(1000);\n    t.assert.strictEqual(t.getGlobalVariable('coins'), initialCoins + 1, 'Coins should increase by 1 when player touches the coin');\n    t.assert.notOk(coin.visible, 'Coin should become invisible after being touched');\n\n    t.end();\n}"
    },
    {
      "name": "Person is only visible if room is '1' and starts at coordinates (0, -160)",
      "code": "const testPersonVisibilityAndStartCoordinates = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const person = t.getSprite('person');\n\n    await t.runUntil(() => t.getGlobalVariable('room') === '1', 5000);\n    t.assert.ok(person.visible, 'Person should be visible in room 1');\n    t.assert.strictEqual(person.x, 0, 'Person should start at x = 0');\n    t.assert.strictEqual(person.y, -160, 'Person should start at y = -160');\n\n    t.end();\n}"
    },
    {
      "name": "Person says 'Did you know that you can go through orange and yellow doors?' when player touches them, otherwise says '' and moves along the x axis",
      "code": "const testPersonInteractionAndMovement = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const person = t.getSprite('person');\n\n    t.dragSprite('player', person.x, person.y);\n    await t.runForTime(1000);\n    t.assert.strictEqual(person.sayText, 'Did you know that you can go through orange and yellow doors?', 'Person should say the message when player touches them');\n\n    t.dragSprite('player', person.x + 50, person.y + 50);\n    await t.runForTime(1000);\n    t.assert.strictEqual(person.sayText, '', 'Person should say nothing when player is not touching them');\n\n    const initialX = person.x;\n    await t.runForTime(1000);\n    t.assert.notStrictEqual(person.x, initialX, 'Person should move along the x axis');\n\n    t.end();\n}"
    }
,
    {
      "name": "Player touches person and person says message",
      "code": "const testPlayerTouchesPerson = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const player = t.getSprite('player');\n    const person = t.getSprite('person');\n    await t.runUntil(() => player.isTouchingSprite('person'), 5000);\n    t.assert.equal(person.sayText, 'Did you know that you can go through orange and yellow doors?', 'Person should say the correct message when touched by player');\n    t.end();\n}"
    },
    {
      "name": "Person touches edge and changes direction",
      "code": "const testPersonTouchesEdge = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const person = t.getSprite('person');\n    const initialDirection = person.direction;\n    await t.runUntil(() => person.isTouchingEdge(), 5000);\n    t.assert.notEqual(person.direction, initialDirection, 'Person should change direction when touching the edge');\n    t.end();\n}"
    },
    {
      "name": "Enemy sign visibility and message",
      "code": "const testEnemySignVisibilityAndMessage = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const enemySign = t.getSprite('enemy sign');\n    const player = t.getSprite('player');\n    await t.runUntil(() => t.getGlobalVariable('room') === 2, 5000);\n    t.assert.ok(enemySign.visible, 'Enemy sign should be visible in room 2');\n    await t.runUntil(() => player.isTouchingSprite('enemy sign'), 5000);\n    t.assert.equal(enemySign.sayText, 'Avoid the patrolling enemies!', 'Enemy sign should say the correct message when touched by player');\n    t.end();\n}"
    },
    {
      "name": "Enemy visibility and starting coordinates",
      "code": "const testEnemyVisibilityAndStartingCoordinates = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const enemy = t.getSprite('enemy');\n    await t.runUntil(() => t.getGlobalVariable('room') === 2, 5000);\n    t.assert.ok(enemy.visible, 'Enemy should be visible in room 2');\n    t.assert.equal(enemy.x, -170, 'Enemy should start at x coordinate -170');\n    t.assert.equal(enemy.y, 0, 'Enemy should start at y coordinate 0');\n    t.end();\n}"
    },
    {
      "name": "Enemy moves left and right",
      "code": "const testEnemyMovesLeftAndRight = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const enemy = t.getSprite('enemy');\n    await t.runUntil(() => t.getGlobalVariable('room') === 2, 5000);\n    const initialX = enemy.x;\n    await t.runForTime(2000);\n    t.assert.notEqual(enemy.x, initialX, 'Enemy should move left and right');\n    t.end();\n}"
    },
    {
      "name": "Enemy touches player and says message",
      "code": "const testEnemyTouchesPlayerAndSaysMessage = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const enemy = t.getSprite('enemy');\n    const player = t.getSprite('player');\n    await t.runUntil(() => t.getGlobalVariable('room') === 2, 5000);\n    await t.runUntil(() => enemy.isTouchingSprite('player'), 5000);\n    t.assert.equal(enemy.sayText, 'Gotcha!', 'Enemy should say Gotcha! when touching player');\n    t.end();\n}"
    },
    {
      "name": "Coin2 visibility and player touches coin2",
      "code": "const testCoin2VisibilityAndPlayerTouchesCoin2 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const coin2 = t.getSprite('coin2');\n    const player = t.getSprite('player');\n    await t.runUntil(() => t.getGlobalVariable('room') === 2, 5000);\n    t.assert.ok(coin2.visible, 'Coin2 should be visible in room 2');\n    const initialCoins = t.getGlobalVariable('coins');\n    await t.runUntil(() => player.isTouchingSprite('coin2'), 5000);\n    t.assert.equal(t.getGlobalVariable('coins'), initialCoins + 1, 'Coins should increase by 1 when player touches coin2');\n    t.end();\n}"
    },
    {
      "name": "Door sign visibility and message",
      "code": "const testDoorSignVisibilityAndMessage = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const doorSign = t.getSprite('door sign');\n    const player = t.getSprite('player');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    t.assert.ok(doorSign.visible, 'Door sign should be visible in room 3');\n    await t.runUntil(() => player.isTouchingSprite('door sign'), 5000);\n    t.assert.equal(doorSign.sayText, 'You\\'ll need a blue key to open this door!', 'Door sign should say the correct message when touched by player');\n    t.end();\n}"
    },
    {
      "name": "Enemy2 visibility and starting coordinates",
      "code": "const testEnemy2VisibilityAndStartingCoordinates = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const enemy2 = t.getSprite('enemy2');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    t.assert.ok(enemy2.visible, 'Enemy2 should be visible in room 3');\n    t.assert.equal(enemy2.x, -5, 'Enemy2 should start at x coordinate -5');\n    t.assert.equal(enemy2.y, -90, 'Enemy2 should start at y coordinate -90');\n    t.end();\n}"
    },
    {
      "name": "Enemy2 moves up and down",
      "code": "const testEnemy2MovesUpAndDown = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const enemy2 = t.getSprite('enemy2');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    const initialY = enemy2.y;\n    await t.runForTime(2000);\n    t.assert.notEqual(enemy2.y, initialY, 'Enemy2 should move up and down');\n    t.end();\n}"
    },
    {
      "name": "Enemy2 touches player and says message",
      "code": "const testEnemy2TouchesPlayerAndSaysMessage = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const enemy2 = t.getSprite('enemy2');\n    const player = t.getSprite('player');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    await t.runUntil(() => enemy2.isTouchingSprite('player'), 5000);\n    t.assert.equal(enemy2.sayText, 'Gotcha!', 'Enemy2 should say Gotcha! when touching player');\n    t.end();\n}"
    },
    {
      "name": "Key-blue visibility",
      "code": "const testKeyBlueVisibility = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const keyBlue = t.getSprite('key-blue');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    t.assert.ok(keyBlue.visible, 'Key-blue should be visible in room 3');\n    t.end();\n}"
    },
    {
      "name": "Player touches key-blue and increases coins",
      "code": "const testPlayerTouchesKeyBlueAndIncreasesCoins = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const keyBlue = t.getSprite('key-blue');\n    const player = t.getSprite('player');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    const initialCoins = t.getGlobalVariable('coins');\n    await t.runUntil(() => player.isTouchingSprite('key-blue'), 5000);\n    t.assert.equal(t.getGlobalVariable('coins'), initialCoins + 3, 'Coins should increase by 3 when player touches key-blue');\n    t.assert.ok(t.getGlobalVariable('inventory').includes('blue key'), 'Blue key should be added to inventory');\n    t.end();\n}"
    },
    {
      "name": "Door-blue visibility",
      "code": "const testDoorBlueVisibility = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const doorBlue = t.getSprite('door-blue');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    t.assert.ok(doorBlue.visible, 'Door-blue should be visible in room 3');\n    t.end();\n}"
    },
    {
      "name": "Door-blue becomes invisible with blue key",
      "code": "const testDoorBlueBecomesInvisibleWithBlueKey = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const doorBlue = t.getSprite('door-blue');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    t.getGlobalVariable('inventory').push('blue key');\n    await t.runForTime(1000);\n    t.assert.notOk(doorBlue.visible, 'Door-blue should become invisible when blue key is in inventory');\n    t.end();\n}"
    },
    {
      "name": "Chest visibility",
      "code": "const testChestVisibility = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const chest = t.getSprite('chest');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    t.assert.ok(chest.visible, 'Chest should be visible in room 3');\n    t.end();\n}"
    },
    {
      "name": "Player touches chest and game ends",
      "code": "const testPlayerTouchesChestAndGameEnds = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const chest = t.getSprite('chest');\n    const player = t.getSprite('player');\n    await t.runUntil(() => t.getGlobalVariable('room') === 3, 5000);\n    await t.runUntil(() => player.isTouchingSprite('chest'), 5000);\n    t.assert.equal(chest.sayText, 'Well done!', 'Chest should say Well done! when touched by player');\n    t.end();\n}"
    }
  ]
}