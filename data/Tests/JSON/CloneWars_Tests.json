{
  "tests": [
    {
      "name": "Global variable lives is set to 3 at the start",
      "code": "const testGlobalLives = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('lives') === 3, 1000);\n    t.assert.equal(t.getGlobalVariable('lives'), 3, 'Global variable lives should be 3 at the start');\n    t.end();\n}"
    },
    {
      "name": "Global variable score is set to 0 at the start",
      "code": "const testGlobalScore = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('score') === 0, 1000);\n    t.assert.equal(t.getGlobalVariable('score'), 0, 'Global variable score should be 0 at the start');\n    t.end();\n}"
    },
    {
      "name": "Lightning is invisible, size 25, direction -90 at the start",
      "code": "const testLightningStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => {\n        const lightning = t.getSprite('Lightning');\n        return !lightning.visible && lightning.size === 25 && lightning.direction === -90;\n    }, 1000);\n    const lightning = t.getSprite('Lightning');\n    t.assert.not(lightning.visible, 'Lightning should be invisible at the start');\n    t.assert.equal(lightning.size, 25, 'Lightning size should be 25 at the start');\n    t.assert.equal(lightning.direction, -90, 'Lightning direction should be -90 at the start');\n    t.end();\n}"
    },
    {
      "name": "Hippo1 is invisible at the start",
      "code": "const testHippo1Invisible = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => !t.getSprite('Hippo1').visible, 1000);\n    t.assert.not(t.getSprite('Hippo1').visible, 'Hippo1 should be invisible at the start');\n    t.end();\n}"
    },
    {
      "name": "Bat has a size of 50 at the start",
      "code": "const testBatSize = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Bat').size === 50, 1000);\n    t.assert.equal(t.getSprite('Bat').size, 50, 'Bat should have a size of 50 at the start');\n    t.end();\n}"
    },
    {
      "name": "Orange is invisible at the start",
      "code": "const testOrangeInvisible = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => !t.getSprite('Orange').visible, 1000);\n    t.assert.not(t.getSprite('Orange').visible, 'Orange should be invisible at the start');\n    t.end();\n}"
    },
    {
      "name": "Game Over is invisible at the start",
      "code": "const testGameOverInvisible = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => !t.getSprite('Game Over').visible, 1000);\n    t.assert.not(t.getSprite('Game Over').visible, 'Game Over should be invisible at the start');\n    t.end();\n}"
    },
    {
      "name": "Spaceship has costume 'normal' at the start",
      "code": "const testSpaceshipCostume = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Spaceship').getCostumeByName('normal') !== undefined, 1000);\n    t.assert.equal(t.getSprite('Spaceship').currentCostume, t.getSprite('Spaceship').getCostumeByName('normal').index, 'Spaceship should have costume normal at the start');\n    t.end();\n}"
    },
    {
      "name": "New clone of Hippo1 is created in random intervals between 2 and 4 seconds",
      "code": "const testHippo1CloneIntervals = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    let initialCloneCount = t.getSprite('Hippo1').getCloneCount();\n    await t.runForTime(2000);\n    let newCloneCount = t.getSprite('Hippo1').getCloneCount();\n    t.assert.greaterOrEqual(newCloneCount, initialCloneCount + 1, 'A new clone of Hippo1 should be created in random intervals between 2 and 4 seconds');\n    t.end();\n}"
    },
    {
      "name": "Bat moves along x axis and changes direction if it hits the edge of the Stage",
      "code": "const testBatMovement = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    let bat = t.getSprite('Bat');\n    let initialDirection = bat.direction;\n    await t.runForTime(5000);\n    t.assert.notEqual(bat.direction, initialDirection, 'Bat should change direction if it hits the edge of the Stage');\n    t.end();\n}"
    },
    {
      "name": "Bat changes costumes every time it moves",
      "code": "const testBatCostumeChange = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    let bat = t.getSprite('Bat');\n    let initialCostume = bat.currentCostume;\n    await t.runForTime(1000);\n    t.assert.notEqual(bat.currentCostume, initialCostume, 'Bat should change costumes every time it moves');\n    t.end();\n}"
    },
    {
      "name": "New clone of Orange is created in random intervals between 5 and 10 seconds",
      "code": "const testOrangeCloneIntervals = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    let initialCloneCount = t.getSprite('Orange').getCloneCount();\n    await t.runForTime(5000);\n    let newCloneCount = t.getSprite('Orange').getCloneCount();\n    t.assert.greaterOrEqual(newCloneCount, initialCloneCount + 1, 'A new clone of Orange should be created in random intervals between 5 and 10 seconds');\n    t.end();\n}"
    },
    {
      "name": "A clone of Orange starts at the current position of Bat",
      "code": "const testOrangeClonePosition = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    let bat = t.getSprite('Bat');\n    await t.runForTime(5000);\n    let orangeClones = t.getSprite('Orange').getClones();\n    let lastClone = orangeClones[orangeClones.length - 1];\n    t.assert.equal(lastClone.x, bat.x, 'A clone of Orange should start at the current position of Bat');\n    t.assert.equal(lastClone.y, bat.y, 'A clone of Orange should start at the current position of Bat');\n    t.end();\n}"
    },
    {
      "name": "The clones of Orange are visible",
      "code": "const testOrangeClonesVisible = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(5000);\n    let orangeClones = t.getSprite('Orange').getClones();\n    for (let clone of orangeClones) {\n        t.assert.ok(clone.visible, 'The clones of Orange should be visible');\n    }\n    t.end();\n}"
    },
    {
      "name": "The clones of Orange y coordinate decreases",
      "code": "const testOrangeClonesYDecreases = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(5000);\n    let orangeClones = t.getSprite('Orange').getClones();\n    for (let clone of orangeClones) {\n        let initialY = clone.y;\n        await t.runForTime(1000);\n        t.assert.less(clone.y, initialY, 'The clones of Orange y coordinate should decrease');\n    }\n    t.end();\n}"
    }
,
    {
      "name": "When the clone of Orange touches the edge of the stage the clone is deleted",
      "code": "const testCloneDeleteOnEdge = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Orange').getCloneCount() > 0, 5000);\n    let clone = t.getSprite('Orange').getClones()[0];\n    await t.runUntil(() => clone.x <= -240 || clone.x >= 240 || clone.y <= -180 || clone.y >= 180, 10000);\n    await t.runForTime(100);\n    t.assert.equal(t.getSprite('Orange').getCloneCount(), 0, 'Clone should be deleted when touching the edge');\n    t.end();\n}"
    },
    {
      "name": "A clone of Hippo1 sets its variable speed to a random value between 2 and 4",
      "code": "const testCloneSpeedRandom = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    let clone = t.getSprite('Hippo1').getClones()[0];\n    let speed = clone.getVariable('speed');\n    t.assert.greaterOrEqual(speed, 2, 'Speed should be at least 2');\n    t.assert.lessOrEqual(speed, 4, 'Speed should be at most 4');\n    t.end();\n}"
    },
    {
      "name": "A clone of Hippo1 starts at a randomly picked x coordinate between -220 and 220 and at y coordinate 150",
      "code": "const testCloneStartPosition = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    let clone = t.getSprite('Hippo1').getClones()[0];\n    t.assert.greaterOrEqual(clone.x, -220, 'X coordinate should be at least -220');\n    t.assert.lessOrEqual(clone.x, 220, 'X coordinate should be at most 220');\n    t.assert.equal(clone.y, 150, 'Y coordinate should be 150');\n    t.end();\n}"
    },
    {
      "name": "Clones of Hippo1 are visible",
      "code": "const testCloneVisibility = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    let clone = t.getSprite('Hippo1').getClones()[0];\n    t.assert.ok(clone.visible, 'Clone should be visible');\n    t.end();\n}"
    },
    {
      "name": "Clones of Hippo1 move [speed] steps and turn pick a random amount of degrees to turn between -10 and 10",
      "code": "const testCloneMovement = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    let clone = t.getSprite('Hippo1').getClones()[0];\n    let initialX = clone.x;\n    let initialY = clone.y;\n    let initialDirection = clone.direction;\n    await t.runForTime(1000);\n    let speed = clone.getVariable('speed');\n    let movedDistance = Math.sqrt(Math.pow(clone.x - initialX, 2) + Math.pow(clone.y - initialY, 2));\n    t.assert.greaterOrEqual(movedDistance, speed - 1, 'Clone should move approximately [speed] steps');\n    t.assert.lessOrEqual(movedDistance, speed + 1, 'Clone should move approximately [speed] steps');\n    let directionChange = Math.abs(clone.direction - initialDirection);\n    t.assert.greaterOrEqual(directionChange, 0, 'Direction change should be at least 0 degrees');\n    t.assert.lessOrEqual(directionChange, 10, 'Direction change should be at most 10 degrees');\n    t.end();\n}"
    },
    {
      "name": "If a clone of Hippo1 touches the edges it changes direction",
      "code": "const testCloneChangeDirectionOnEdge = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    let clone = t.getSprite('Hippo1').getClones()[0];\n    await t.runUntil(() => clone.x <= -240 || clone.x >= 240 || clone.y <= -180 || clone.y >= 180, 10000);\n    let initialDirection = clone.direction;\n    await t.runForTime(100);\n    t.assert.notEqual(clone.direction, initialDirection, 'Clone should change direction when touching the edge');\n    t.end();\n}"
    },
    {
      "name": "If a clone of Hippo1 touches Lightning the score is increased by 10 and the clone is deleted",
      "code": "const testCloneTouchLightning = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0 && t.getSprite('Lightning').getCloneCount() > 0, 5000);\n    let hippoClone = t.getSprite('Hippo1').getClones()[0];\n    let lightningClone = t.getSprite('Lightning').getClones()[0];\n    let initialScore = t.getGlobalVariable('score');\n    await t.runUntil(() => hippoClone.isTouchingSprite('Lightning'), 10000);\n    await t.runForTime(100);\n    t.assert.equal(t.getGlobalVariable('score'), initialScore + 10, 'Score should increase by 10');\n    t.assert.equal(t.getSprite('Hippo1').getCloneCount(), 0, 'Hippo1 clone should be deleted');\n    t.end();\n}"
    },
    {
      "name": "If Spaceship touches Hippo1 or Orange the costume changes to 'hit' for 1 second and lives is decreased by 1",
      "code": "const testSpaceshipTouch = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Spaceship').isTouchingSprite('Hippo1') || t.getSprite('Spaceship').isTouchingSprite('Orange'), 10000);\n    let initialLives = t.getGlobalVariable('lives');\n    await t.runForTime(100);\n    t.assert.equal(t.getSprite('Spaceship').currentCostume, t.getSprite('Spaceship').getCostumeByName('hit').index, 'Costume should change to hit');\n    await t.runForTime(1000);\n    t.assert.equal(t.getGlobalVariable('lives'), initialLives - 1, 'Lives should decrease by 1');\n    t.end();\n}"
    },
    {
      "name": "If space is pressed a new clone of Lightning is created",
      "code": "const testSpacePressCreatesClone = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    let initialCloneCount = t.getSprite('Lightning').getCloneCount();\n    t.keyPress('space');\n    await t.runForTime(100);\n    t.assert.equal(t.getSprite('Lightning').getCloneCount(), initialCloneCount + 1, 'A new clone of Lightning should be created');\n    t.end();\n}"
    },
    {
      "name": "If left arrow is pressed the spaceship's x coordinate is decreased by 4",
      "code": "const testLeftArrowPress = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    let spaceship = t.getSprite('Spaceship');\n    let initialX = spaceship.x;\n    t.keyPress('left arrow');\n    await t.runForTime(100);\n    t.assert.equal(spaceship.x, initialX - 4, 'Spaceship x coordinate should decrease by 4');\n    t.end();\n}"
    },
    {
      "name": "If right arrow is pressed the spaceship's x coordinate is increased by 4",
      "code": "const testRightArrowPress = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    let spaceship = t.getSprite('Spaceship');\n    let initialX = spaceship.x;\n    t.keyPress('right arrow');\n    await t.runForTime(100);\n    t.assert.equal(spaceship.x, initialX + 4, 'Spaceship x coordinate should increase by 4');\n    t.end();\n}"
    },
    {
      "name": "When lives reaches 0 Game Over becomes visible and the game ends",
      "code": "const testGameOver = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('lives') === 0, 10000);\n    await t.runForTime(100);\n    t.assert.ok(t.getSprite('Game Over').visible, 'Game Over should be visible');\n    t.assert.ok(t.getGlobalVariable('gameEnded'), 'Game should end');\n    t.end();\n}"
    },
    {
      "name": "A clone of Lightning starts at the current position of Spaceship and is visible",
      "code": "const testLightningCloneStartPosition = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    let spaceship = t.getSprite('Spaceship');\n    t.keyPress('space');\n    await t.runForTime(100);\n    let lightningClone = t.getSprite('Lightning').getClones()[0];\n    t.assert.equal(lightningClone.x, spaceship.x, 'Lightning clone should start at the spaceship x position');\n    t.assert.equal(lightningClone.y, spaceship.y, 'Lightning clone should start at the spaceship y position');\n    t.assert.ok(lightningClone.visible, 'Lightning clone should be visible');\n    t.end();\n}"
    },
    {
      "name": "Clones of Lightning continue to increase their y coordinate by 10",
      "code": "const testLightningCloneMovement = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Lightning').getCloneCount() > 0, 5000);\n    let lightningClone = t.getSprite('Lightning').getClones()[0];\n    let initialY = lightningClone.y;\n    await t.runForTime(1000);\n    t.assert.equal(lightningClone.y, initialY + 10, 'Lightning clone y coordinate should increase by 10');\n    t.end();\n}"
    },
    {
      "name": "When a clone of Lightning touches the edge of the stage it gets deleted",
      "code": "const testLightningCloneDeleteOnEdge = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Lightning').getCloneCount() > 0, 5000);\n    let lightningClone = t.getSprite('Lightning').getClones()[0];\n    await t.runUntil(() => lightningClone.y >= 180, 10000);\n    await t.runForTime(100);\n    t.assert.equal(t.getSprite('Lightning').getCloneCount(), 0, 'Lightning clone should be deleted when touching the edge');\n    t.end();\n}"
    }
  ]
}