{
  "tests": [
    {
      "name": "Global variable lives is set to 3 at the start",
      "code": "const testGlobalLives = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('lives') === 3, 1000);\n    t.assert.equal(t.getGlobalVariable('lives'), 3, 'Global variable lives should be 3 at the start');\n    t.end();\n}"
    },
    {
      "name": "Global variable score is set to 0 at the start",
      "code": "const testGlobalScore = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('score') === 0, 1000);\n    t.assert.equal(t.getGlobalVariable('score'), 0, 'Global variable score should be 0 at the start');\n    t.end();\n}"
    },
    {
      "name": "Lightning is invisible, size 25, direction -90 at the start",
      "code": "const testLightningStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const lightning = await t.getSprite('Lightning');\n    await t.runUntil(() => !lightning.visible && lightning.size === 25 && lightning.direction === -90, 1000);\n    t.assert.not(lightning.visible, 'Lightning should be invisible at the start');\n    t.assert.equal(lightning.size, 25, 'Lightning should have size 25 at the start');\n    t.assert.equal(lightning.direction, -90, 'Lightning should have direction -90 at the start');\n    t.end();\n}"
    },
    {
      "name": "Hippo1 is invisible at the start",
      "code": "const testHippo1Start = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const hippo1 = await t.getSprite('Hippo1');\n    await t.runUntil(() => !hippo1.visible, 1000);\n    t.assert.not(hippo1.visible, 'Hippo1 should be invisible at the start');\n    t.end();\n}"
    },
    {
      "name": "Bat has size 50 at the start",
      "code": "const testBatSizeStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const bat = await t.getSprite('Bat');\n    await t.runUntil(() => bat.size === 50, 1000);\n    t.assert.equal(bat.size, 50, 'Bat should have size 50 at the start');\n    t.end();\n}"
    },
    {
      "name": "Orange is invisible at the start",
      "code": "const testOrangeStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const orange = await t.getSprite('Orange');\n    await t.runUntil(() => !orange.visible, 1000);\n    t.assert.not(orange.visible, 'Orange should be invisible at the start');\n    t.end();\n}"
    },
    {
      "name": "Game Over is invisible at the start",
      "code": "const testGameOverStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const gameOver = await t.getSprite('Game Over');\n    await t.runUntil(() => !gameOver.visible, 1000);\n    t.assert.not(gameOver.visible, 'Game Over should be invisible at the start');\n    t.end();\n}"
    },
    {
      "name": "Spaceship has costume 'normal' at the start",
      "code": "const testSpaceshipCostumeStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const spaceship = await t.getSprite('Spaceship');\n    await t.runUntil(() => spaceship.getCostumeByName('normal') === spaceship.currentCostume, 1000);\n    t.assert.equal(spaceship.getCostumeByName('normal'), spaceship.currentCostume, 'Spaceship should have costume normal at the start');\n    t.end();\n}"
    },
    {
      "name": "New clone of Hippo1 is created in random intervals between 2 and 4 seconds",
      "code": "const testHippo1CloneInterval = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const hippo1 = await t.getSprite('Hippo1');\n    let initialCloneCount = hippo1.getCloneCount();\n    await t.runForTime(2000);\n    let newCloneCount = hippo1.getCloneCount();\n    t.assert.greater(newCloneCount, initialCloneCount, 'A new clone of Hippo1 should be created between 2 and 4 seconds');\n    t.end();\n}"
    },
    {
      "name": "Bat moves along x axis and changes direction at stage edge",
      "code": "const testBatMovement = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const bat = await t.getSprite('Bat');\n    let initialDirection = bat.direction;\n    await t.runForTime(1000);\n    t.assert.notEqual(bat.direction, initialDirection, 'Bat should change direction if it hits the edge of the stage');\n    t.end();\n}"
    },
    {
      "name": "Bat changes costumes every time it moves",
      "code": "const testBatCostumeChange = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const bat = await t.getSprite('Bat');\n    let initialCostume = bat.currentCostume;\n    await t.runForTime(1000);\n    t.assert.notEqual(bat.currentCostume, initialCostume, 'Bat should change costumes every time it moves');\n    t.end();\n}"
    },
    {
      "name": "New clone of Orange is created in random intervals between 5 and 10 seconds",
      "code": "const testOrangeCloneInterval = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const orange = await t.getSprite('Orange');\n    let initialCloneCount = orange.getCloneCount();\n    await t.runForTime(5000);\n    let newCloneCount = orange.getCloneCount();\n    t.assert.greater(newCloneCount, initialCloneCount, 'A new clone of Orange should be created between 5 and 10 seconds');\n    t.end();\n}"
    },
    {
      "name": "Clone of Orange starts at current position of Bat",
      "code": "const testOrangeClonePosition = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const bat = await t.getSprite('Bat');\n    const orange = await t.getSprite('Orange');\n    await t.runForTime(5000);\n    const newClone = orange.getNewClones()[0];\n    t.assert.equal(newClone.x, bat.x, 'Clone of Orange should start at the current x position of Bat');\n    t.assert.equal(newClone.y, bat.y, 'Clone of Orange should start at the current y position of Bat');\n    t.end();\n}"
    },
    {
      "name": "Clones of Orange are visible",
      "code": "const testOrangeClonesVisible = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const orange = await t.getSprite('Orange');\n    await t.runForTime(5000);\n    const newClone = orange.getNewClones()[0];\n    t.assert.ok(newClone.visible, 'Clones of Orange should be visible');\n    t.end();\n}"
    },
    {
      "name": "Clones of Orange y coordinate decreases",
      "code": "const testOrangeClonesYDecreases = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const orange = await t.getSprite('Orange');\n    await t.runForTime(5000);\n    const newClone = orange.getNewClones()[0];\n    let initialY = newClone.y;\n    await t.runForTime(1000);\n    t.assert.less(newClone.y, initialY, 'Clones of Orange y coordinate should decrease');\n    t.end();\n}"
    }
,
    {
      "name": "When the clone of Orange touches the edge of the stage the clone is deleted",
      "code": "const testCloneDeletionOnEdge = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Orange').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Orange').getClones()[0];\n    await t.runUntil(() => clone.isTouchingEdge(), 10000);\n    await t.runForTime(100);\n    t.assert.equal(t.getSprite('Orange').getCloneCount(), 0, 'Clone should be deleted when it touches the edge');\n    t.end();\n}"
    },
    {
      "name": "A clone of Hippo1 sets its variable speed to a random value between 2 and 4",
      "code": "const testCloneSpeedVariable = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Hippo1').getClones()[0];\n    const speed = clone.getVariable('speed').value;\n    t.assert.greaterOrEqual(speed, 2, 'Speed should be at least 2');\n    t.assert.lessOrEqual(speed, 4, 'Speed should be at most 4');\n    t.end();\n}"
    },
    {
      "name": "A clone of Hippo1 starts at a randomly picked x coordinate between -220 and 220 and at y coordinate 150",
      "code": "const testCloneStartPosition = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Hippo1').getClones()[0];\n    t.assert.greaterOrEqual(clone.x, -220, 'X coordinate should be at least -220');\n    t.assert.lessOrEqual(clone.x, 220, 'X coordinate should be at most 220');\n    t.assert.equal(clone.y, 150, 'Y coordinate should be 150');\n    t.end();\n}"
    },
    {
      "name": "Clones of Hippo1 are visible",
      "code": "const testCloneVisibility = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Hippo1').getClones()[0];\n    t.assert.ok(clone.visible, 'Clone should be visible');\n    t.end();\n}"
    },
    {
      "name": "Clones of Hippo1 move [speed] steps and turn pick a random amount of degrees to turn between -10 and 10",
      "code": "const testCloneMovement = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Hippo1').getClones()[0];\n    const initialX = clone.x;\n    const initialY = clone.y;\n    const speed = clone.getVariable('speed').value;\n    await t.runForTime(1000);\n    t.assert.notEqual(clone.x, initialX, 'Clone should have moved in x direction');\n    t.assert.notEqual(clone.y, initialY, 'Clone should have moved in y direction');\n    t.assert.greaterOrEqual(clone.direction, -10, 'Direction should be at least -10 degrees');\n    t.assert.lessOrEqual(clone.direction, 10, 'Direction should be at most 10 degrees');\n    t.end();\n}"
    },
    {
      "name": "If a clone of Hippo1 touches the edges it changes direction",
      "code": "const testCloneChangeDirectionOnEdge = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Hippo1').getClones()[0];\n    await t.runUntil(() => clone.isTouchingEdge(), 10000);\n    const initialDirection = clone.direction;\n    await t.runForTime(100);\n    t.assert.notEqual(clone.direction, initialDirection, 'Clone should change direction when it touches the edge');\n    t.end();\n}"
    },
    {
      "name": "If a clone of Hippo1 touches Lightning the score is increased by 10 and the clone is deleted",
      "code": "const testCloneTouchLightning = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Hippo1').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Hippo1').getClones()[0];\n    const initialScore = t.getGlobalVariable('score').value;\n    await t.runUntil(() => clone.isTouchingSprite('Lightning'), 10000);\n    await t.runForTime(100);\n    t.assert.equal(t.getGlobalVariable('score').value, initialScore + 10, 'Score should increase by 10 when clone touches Lightning');\n    t.assert.equal(t.getSprite('Hippo1').getCloneCount(), 0, 'Clone should be deleted when it touches Lightning');\n    t.end();\n}"
    },
    {
      "name": "If Spaceship touches Hippo1 or Orange the costume changes to 'hit' for 1 second and lives is decreased by 1",
      "code": "const testSpaceshipTouch = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    const spaceship = t.getSprite('Spaceship');\n    const initialLives = t.getGlobalVariable('lives').value;\n    await t.runUntil(() => spaceship.isTouchingSprite('Hippo1') || spaceship.isTouchingSprite('Orange'), 10000);\n    await t.runForTime(100);\n    t.assert.equal(spaceship.currentCostume.name, 'hit', 'Costume should change to hit');\n    await t.runForTime(1000);\n    t.assert.equal(t.getGlobalVariable('lives').value, initialLives - 1, 'Lives should decrease by 1');\n    t.end();\n}"
    },
    {
      "name": "If space is pressed a new clone of Lightning is created",
      "code": "const testSpacePressCreatesClone = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    const initialCloneCount = t.getSprite('Lightning').getCloneCount();\n    t.keyPress('space');\n    await t.runForTime(100);\n    t.assert.equal(t.getSprite('Lightning').getCloneCount(), initialCloneCount + 1, 'A new clone of Lightning should be created when space is pressed');\n    t.end();\n}"
    },
    {
      "name": "If left arrow is pressed the spaceship's x coordinate is decreased by 4",
      "code": "const testLeftArrowPress = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    const spaceship = t.getSprite('Spaceship');\n    const initialX = spaceship.x;\n    t.keyPress('left arrow');\n    await t.runForTime(100);\n    t.assert.equal(spaceship.x, initialX - 4, 'Spaceship x coordinate should decrease by 4 when left arrow is pressed');\n    t.end();\n}"
    },
    {
      "name": "If right arrow is pressed the spaceship's x coordinate is increased by 4",
      "code": "const testRightArrowPress = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    const spaceship = t.getSprite('Spaceship');\n    const initialX = spaceship.x;\n    t.keyPress('right arrow');\n    await t.runForTime(100);\n    t.assert.equal(spaceship.x, initialX + 4, 'Spaceship x coordinate should increase by 4 when right arrow is pressed');\n    t.end();\n}"
    },
    {
      "name": "When lives reaches 0 Game Over becomes visible and the game ends",
      "code": "const testGameOverVisibility = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    t.getGlobalVariable('lives').value = 1;\n    await t.runUntil(() => t.getGlobalVariable('lives').value === 0, 10000);\n    const gameOver = t.getSprite('Game Over');\n    t.assert.ok(gameOver.visible, 'Game Over should be visible when lives reach 0');\n    t.end();\n}"
    },
    {
      "name": "A clone of Lightning starts at the current position of Spaceship and is visible",
      "code": "const testLightningCloneStartPosition = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    const spaceship = t.getSprite('Spaceship');\n    t.keyPress('space');\n    await t.runUntil(() => t.getSprite('Lightning').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Lightning').getClones()[0];\n    t.assert.equal(clone.x, spaceship.x, 'Clone of Lightning should start at the x coordinate of Spaceship');\n    t.assert.equal(clone.y, spaceship.y, 'Clone of Lightning should start at the y coordinate of Spaceship');\n    t.assert.ok(clone.visible, 'Clone of Lightning should be visible');\n    t.end();\n}"
    },
    {
      "name": "Clones of Lightning continue to increase their y coordinate by 10",
      "code": "const testLightningCloneMovement = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    t.keyPress('space');\n    await t.runUntil(() => t.getSprite('Lightning').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Lightning').getClones()[0];\n    const initialY = clone.y;\n    await t.runForTime(1000);\n    t.assert.greater(clone.y, initialY, 'Clone of Lightning should increase its y coordinate');\n    t.end();\n}"
    },
    {
      "name": "When a clone of Lightning touches the edge of the stage it gets deleted",
      "code": "const testLightningCloneDeletionOnEdge = async function (t) {\n    t.seedScratch(12345);\n    t.greenFlag();\n    t.keyPress('space');\n    await t.runUntil(() => t.getSprite('Lightning').getCloneCount() > 0, 5000);\n    const clone = t.getSprite('Lightning').getClones()[0];\n    await t.runUntil(() => clone.isTouchingEdge(), 10000);\n    await t.runForTime(100);\n    t.assert.equal(t.getSprite('Lightning').getCloneCount(), 0, 'Clone of Lightning should be deleted when it touches the edge');\n    t.end();\n}"
    }
  ]
}