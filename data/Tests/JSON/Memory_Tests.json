{
  "tests": [
    {
      "name": "Test initial score",
      "code": "const testInitialScore = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('score') === 3, 5000);\n    t.assert.equal(t.getGlobalVariable('score'), 3, 'Initial score should be 3');\n    t.end();\n}"
    },
    {
      "name": "Test sequence generation and score increment",
      "code": "const testSequenceGenerationAndScoreIncrement = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = await t.getSprite('Ballerina');\n    const stage = await t.getStage();\n    let previousScore = t.getGlobalVariable('score');\n    while (true) {\n        await t.runUntil(() => t.getSpriteVariable('Ballerina', 'sequence').length === 0, 10000);\n        t.assert.equal(t.getSpriteVariable('Ballerina', 'sequence').length, 0, 'Sequence list should be empty');\n        t.assert.greater(t.getGlobalVariable('score'), previousScore, 'Score should be incremented');\n        previousScore = t.getGlobalVariable('score');\n        for (let i = 0; i < 40; i++) {\n            await t.runForTime(25);\n            t.assert.notEqual(stage.effects['color'], 0, 'Stage color effect should change');\n        }\n        t.assert.equal(stage.effects['color'], 0, 'Stage color effect should be cleared');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test red click",
      "code": "const testRedClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = await t.getSprite('Ballerina');\n    await t.runUntil(() => t.getSpriteVariable('Ballerina', 'sequence').length > 0, 5000);\n    if (t.getSpriteVariable('Ballerina', 'sequence')[0] === 1) {\n        t.clickSprite('red');\n        await t.runForTime(1000);\n        t.assert.notEqual(t.getSpriteVariable('Ballerina', 'sequence')[0], 1, 'First item should be removed if it is 1');\n    } else {\n        t.clickSprite('red');\n        await t.runForTime(1000);\n        t.assert.equal(ballerina.sayText, 'Game over!', 'Game Over routine should happen');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test blue click",
      "code": "const testBlueClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = await t.getSprite('Ballerina');\n    await t.runUntil(() => t.getSpriteVariable('Ballerina', 'sequence').length > 0, 5000);\n    if (t.getSpriteVariable('Ballerina', 'sequence')[0] === 2) {\n        t.clickSprite('blue');\n        await t.runForTime(1000);\n        t.assert.notEqual(t.getSpriteVariable('Ballerina', 'sequence')[0], 2, 'First item should be removed if it is 2');\n    } else {\n        t.clickSprite('blue');\n        await t.runForTime(1000);\n        t.assert.equal(ballerina.sayText, 'Game over!', 'Game Over routine should happen');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test green click",
      "code": "const testGreenClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = await t.getSprite('Ballerina');\n    await t.runUntil(() => t.getSpriteVariable('Ballerina', 'sequence').length > 0, 5000);\n    if (t.getSpriteVariable('Ballerina', 'sequence')[0] === 3) {\n        t.clickSprite('green');\n        await t.runForTime(1000);\n        t.assert.notEqual(t.getSpriteVariable('Ballerina', 'sequence')[0], 3, 'First item should be removed if it is 3');\n    } else {\n        t.clickSprite('green');\n        await t.runForTime(1000);\n        t.assert.equal(ballerina.sayText, 'Game over!', 'Game Over routine should happen');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test yellow click",
      "code": "const testYellowClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = await t.getSprite('Ballerina');\n    await t.runUntil(() => t.getSpriteVariable('Ballerina', 'sequence').length > 0, 5000);\n    if (t.getSpriteVariable('Ballerina', 'sequence')[0] === 4) {\n        t.clickSprite('yellow');\n        await t.runForTime(1000);\n        t.assert.notEqual(t.getSpriteVariable('Ballerina', 'sequence')[0], 4, 'First item should be removed if it is 4');\n    } else {\n        t.clickSprite('yellow');\n        await t.runForTime(1000);\n        t.assert.equal(ballerina.sayText, 'Game over!', 'Game Over routine should happen');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test Game Over routine",
      "code": "const testGameOverRoutine = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = await t.getSprite('Ballerina');\n    const initialHighScore = t.getGlobalVariable('high score');\n    const initialName = t.getGlobalVariable('name');\n    await t.runUntil(() => ballerina.sayText === 'Game over!', 10000);\n    await t.runForTime(1000);\n    const currentScore = t.getGlobalVariable('score');\n    if (currentScore > initialHighScore) {\n        t.assert.equal(t.getGlobalVariable('high score'), currentScore, 'High score should be updated');\n        t.assert.equal(ballerina.sayText, 'High Score! What is your name?', 'Ballerina should ask for name');\n        t.typeText('TestName');\n        await t.runForTime(1000);\n        t.assert.equal(t.getGlobalVariable('name'), 'TestName', 'Name should be updated');\n    } else {\n        t.assert.equal(t.getGlobalVariable('high score'), initialHighScore, 'High score should remain the same');\n        t.assert.equal(t.getGlobalVariable('name'), initialName, 'Name should remain the same');\n    }\n    t.end();\n}"
    }
  ]
}