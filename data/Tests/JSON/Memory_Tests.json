{
  "tests": [
    {
      "name": "Global variable score is 3 at the start",
      "code": "const testGlobalVariableScore = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('score') === 3, 5000);\n    t.assert.equal(t.getGlobalVariable('score'), 3, 'Global variable score should be 3 at the start');\n    t.end();\n}"
    },
    {
      "name": "Routine repeats until Game Over",
      "code": "const testRoutineRepeatsUntilGameOver = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = t.getStage();\n    const ballerina = t.getSprite('Ballerina');\n    const sequenceList = stage.getList('sequence', true);\n    let previousScore = t.getGlobalVariable('score');\n\n    while (true) {\n        await t.runUntil(() => sequenceList.value.length === 0, 5000);\n        t.assert.equal(sequenceList.value.length, 0, 'Sequence list should be empty');\n        t.assert.greater(t.getGlobalVariable('score'), previousScore, 'Score should increase by 1');\n        previousScore = t.getGlobalVariable('score');\n\n        for (let i = 0; i < 40; i++) {\n            await t.runForTime(100);\n            t.assert.equal(stage.effects['color'], 25 * (i + 1), 'Stage color effect should change by 25');\n        }\n        t.assert.equal(stage.effects['color'], 0, 'Stage color effect should be cleared');\n    }\n    t.end();\n}"
    },
    {
      "name": "Red click removes '1' from sequence or triggers Game Over",
      "code": "const testRedClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.value.length === t.getGlobalVariable('score'), 5000);\n    if (sequenceList.value[0] === '1') {\n        t.clickSprite('red');\n        await t.runForTime(1000);\n        t.assert.not(sequenceList.value.includes('1'), 'Red click should remove 1 from sequence');\n    } else {\n        t.clickSprite('red');\n        await t.runForTime(1000);\n        t.assert.equal(t.getSprite('Ballerina').sayText, 'Game over!', 'Game Over should be triggered');\n    }\n    t.end();\n}"
    },
    {
      "name": "Blue click removes '2' from sequence or triggers Game Over",
      "code": "const testBlueClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.value.length === t.getGlobalVariable('score'), 5000);\n    if (sequenceList.value[0] === '2') {\n        t.clickSprite('blue');\n        await t.runForTime(1000);\n        t.assert.not(sequenceList.value.includes('2'), 'Blue click should remove 2 from sequence');\n    } else {\n        t.clickSprite('blue');\n        await t.runForTime(1000);\n        t.assert.equal(t.getSprite('Ballerina').sayText, 'Game over!', 'Game Over should be triggered');\n    }\n    t.end();\n}"
    },
    {
      "name": "Green click removes '3' from sequence or triggers Game Over",
      "code": "const testGreenClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.value.length === t.getGlobalVariable('score'), 5000);\n    if (sequenceList.value[0] === '3') {\n        t.clickSprite('green');\n        await t.runForTime(1000);\n        t.assert.not(sequenceList.value.includes('3'), 'Green click should remove 3 from sequence');\n    } else {\n        t.clickSprite('green');\n        await t.runForTime(1000);\n        t.assert.equal(t.getSprite('Ballerina').sayText, 'Game over!', 'Game Over should be triggered');\n    }\n    t.end();\n}"
    },
    {
      "name": "Yellow click removes '4' from sequence or triggers Game Over",
      "code": "const testYellowClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.value.length === t.getGlobalVariable('score'), 5000);\n    if (sequenceList.value[0] === '4') {\n        t.clickSprite('yellow');\n        await t.runForTime(1000);\n        t.assert.not(sequenceList.value.includes('4'), 'Yellow click should remove 4 from sequence');\n    } else {\n        t.clickSprite('yellow');\n        await t.runForTime(1000);\n        t.assert.equal(t.getSprite('Ballerina').sayText, 'Game over!', 'Game Over should be triggered');\n    }\n    t.end();\n}"
    },
    {
      "name": "Game Over routine",
      "code": "const testGameOverRoutine = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = t.getSprite('Ballerina');\n    const stage = t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.value.length === t.getGlobalVariable('score'), 5000);\n    t.clickSprite('red'); // Trigger Game Over\n    await t.runForTime(1000);\n    t.assert.equal(ballerina.sayText, 'Game over!', 'Ballerina should say Game over!');\n\n    const score = t.getGlobalVariable('score');\n    const highScore = t.getGlobalVariable('high score');\n\n    if (score > highScore) {\n        t.assert.equal(ballerina.sayText, 'High Score! What is your name?', 'Ballerina should ask for name');\n        t.typeText('TestName');\n        await t.runForTime(1000);\n        t.assert.equal(t.getGlobalVariable('name'), 'TestName', 'Global variable name should be set to the answer');\n    }\n    t.end();\n}"
    }
  ]
}