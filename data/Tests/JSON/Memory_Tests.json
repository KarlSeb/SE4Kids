{
  "tests": [
    {
      "name": "At the start the global variable score is 3",
      "code": "const testStartScore = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('score') === 3, 5000);\n    t.assert.equal(t.getGlobalVariable('score'), 3, 'The global variable score should be 3 at the start');\n    t.end();\n}"
    },
    {
      "name": "Routine repeats until Game Over",
      "code": "const testRoutineRepeats = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = await t.getSprite('Ballerina');\n    const stage = await t.getStage();\n    let previousScore = t.getGlobalVariable('score');\n    let sequenceList = stage.getList('sequence', true);\n\n    t.addConstraint(async () => {\n        if (sequenceList.length === 0) {\n            t.assert.greater(t.getGlobalVariable('score'), previousScore, 'Score should increase when sequence list is empty');\n            previousScore = t.getGlobalVariable('score');\n            for (let i = 0; i < 40; i++) {\n                t.assert.equal(stage.effects['color'], 25 * (i + 1), 'Stage color effect should change by 25');\n                await t.runForTime(100);\n            }\n            t.assert.equal(stage.effects['color'], 0, 'Stage color effect should be cleared');\n        } else {\n            t.assert.equal(sequenceList.length, t.getGlobalVariable('score'), 'Sequence list should have score items');\n            for (let i = 0; i < sequenceList.length; i++) {\n                t.assert.ok(sequenceList[i] >= 1 && sequenceList[i] <= 4, 'Sequence list items should be between 1 and 4');\n                t.assert.equal(ballerina.currentCostume, sequenceList[i] - 1, 'Ballerina should change costume to the index of the generated number');\n            }\n        }\n    });\n\n    await t.runForTime(10000);\n    t.end();\n}"
    },
    {
      "name": "Click red and first item in sequence is 1",
      "code": "const testClickRed = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = await t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.length > 0, 5000);\n    if (sequenceList[0] === 1) {\n        t.clickSprite('red');\n        await t.runForTime(1000);\n        t.assert.not(sequenceList.includes(1), 'First item should be removed from the sequence list when red is clicked and first item is 1');\n    } else {\n        t.clickSprite('red');\n        await t.runForTime(1000);\n        t.assert.ok(sequenceList.includes(1), 'Game Over routine should happen when red is clicked and first item is not 1');\n    }\n    t.end();\n}"
    },
    {
      "name": "Click blue and first item in sequence is 2",
      "code": "const testClickBlue = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = await t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.length > 0, 5000);\n    if (sequenceList[0] === 2) {\n        t.clickSprite('blue');\n        await t.runForTime(1000);\n        t.assert.not(sequenceList.includes(2), 'First item should be removed from the sequence list when blue is clicked and first item is 2');\n    } else {\n        t.clickSprite('blue');\n        await t.runForTime(1000);\n        t.assert.ok(sequenceList.includes(2), 'Game Over routine should happen when blue is clicked and first item is not 2');\n    }\n    t.end();\n}"
    },
    {
      "name": "Click green and first item in sequence is 3",
      "code": "const testClickGreen = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = await t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.length > 0, 5000);\n    if (sequenceList[0] === 3) {\n        t.clickSprite('green');\n        await t.runForTime(1000);\n        t.assert.not(sequenceList.includes(3), 'First item should be removed from the sequence list when green is clicked and first item is 3');\n    } else {\n        t.clickSprite('green');\n        await t.runForTime(1000);\n        t.assert.ok(sequenceList.includes(3), 'Game Over routine should happen when green is clicked and first item is not 3');\n    }\n    t.end();\n}"
    },
    {
      "name": "Click yellow and first item in sequence is 4",
      "code": "const testClickYellow = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const stage = await t.getStage();\n    const sequenceList = stage.getList('sequence', true);\n\n    await t.runUntil(() => sequenceList.length > 0, 5000);\n    if (sequenceList[0] === 4) {\n        t.clickSprite('yellow');\n        await t.runForTime(1000);\n        t.assert.not(sequenceList.includes(4), 'First item should be removed from the sequence list when yellow is clicked and first item is 4');\n    } else {\n        t.clickSprite('yellow');\n        await t.runForTime(1000);\n        t.assert.ok(sequenceList.includes(4), 'Game Over routine should happen when yellow is clicked and first item is not 4');\n    }\n    t.end();\n}"
    },
    {
      "name": "Game Over routine",
      "code": "const testGameOverRoutine = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = await t.getSprite('Ballerina');\n    const stage = await t.getStage();\n    const initialHighScore = t.getGlobalVariable('high score');\n    const initialScore = t.getGlobalVariable('score');\n\n    // Trigger Game Over routine\n    t.clickSprite('red');\n    await t.runForTime(1000);\n\n    t.assert.equal(ballerina.sayText, 'Game over!', 'Ballerina should say Game over!');\n    await t.runForTime(1000);\n\n    if (initialScore > initialHighScore) {\n        t.assert.equal(t.getGlobalVariable('high score'), initialScore, 'High score should be updated to the value of score');\n        t.assert.equal(ballerina.sayText, 'High Score! What is your name?', 'Ballerina should ask for name if score is higher than high score');\n        t.typeText('TestName');\n        await t.runForTime(1000);\n        t.assert.equal(t.getGlobalVariable('name'), 'TestName', 'Global variable name should be set to the answer');\n    }\n\n    t.end();\n}"
    }
  ]
}