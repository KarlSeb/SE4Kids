{
  "tests": [
    {
      "name": "Test if the global variable score is 3 at the start",
      "code": "const testGlobalVariableScoreAtStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('score') === 3, 5000);\n    t.assert.equal(t.getGlobalVariable('score'), 3, 'The global variable score should be 3 at the start');\n    t.end();\n}"
    },
    {
      "name": "Test the routine until Game Over",
      "code": "const testRoutineUntilGameOver = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = t.getSprite('Ballerina');\n    const stage = t.getStage();\n    let score = t.getGlobalVariable('score');\n    while (true) {\n        await t.runUntil(() => ballerina.getList('sequence').length === 0, 5000);\n        t.assert.equal(ballerina.getList('sequence').length, 0, 'The list sequence should be empty');\n        score++;\n        t.assert.equal(t.getGlobalVariable('score'), score, 'Score should be increased by 1');\n        for (let i = 0; i < 40; i++) {\n            await t.runForTime(25);\n            t.assert.equal(stage.effects['color'], 25 * (i + 1), 'Stage color effect should change by 25');\n        }\n        t.assert.equal(stage.effects['color'], 0, 'Stage color effect should be cleared');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test if red is clicked and the first item in sequence is 1",
      "code": "const testRedClickSequence1 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = t.getSprite('Ballerina');\n    await t.runUntil(() => ballerina.getList('sequence').length > 0, 5000);\n    if (ballerina.getList('sequence')[0] === 1) {\n        t.clickSprite('red');\n        await t.runForTime(1000);\n        t.assert.not(ballerina.getList('sequence').includes(1), 'The first item in sequence should be removed if it is 1 and red is clicked');\n    } else {\n        t.clickSprite('red');\n        await t.runForTime(1000);\n        t.assert.ok(ballerina.sayText.includes('Game over!'), 'Game Over routine should happen if red is clicked and the first item in sequence is not 1');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test if blue is clicked and the first item in sequence is 2",
      "code": "const testBlueClickSequence2 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = t.getSprite('Ballerina');\n    await t.runUntil(() => ballerina.getList('sequence').length > 0, 5000);\n    if (ballerina.getList('sequence')[0] === 2) {\n        t.clickSprite('blue');\n        await t.runForTime(1000);\n        t.assert.not(ballerina.getList('sequence').includes(2), 'The first item in sequence should be removed if it is 2 and blue is clicked');\n    } else {\n        t.clickSprite('blue');\n        await t.runForTime(1000);\n        t.assert.ok(ballerina.sayText.includes('Game over!'), 'Game Over routine should happen if blue is clicked and the first item in sequence is not 2');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test if green is clicked and the first item in sequence is 3",
      "code": "const testGreenClickSequence3 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = t.getSprite('Ballerina');\n    await t.runUntil(() => ballerina.getList('sequence').length > 0, 5000);\n    if (ballerina.getList('sequence')[0] === 3) {\n        t.clickSprite('green');\n        await t.runForTime(1000);\n        t.assert.not(ballerina.getList('sequence').includes(3), 'The first item in sequence should be removed if it is 3 and green is clicked');\n    } else {\n        t.clickSprite('green');\n        await t.runForTime(1000);\n        t.assert.ok(ballerina.sayText.includes('Game over!'), 'Game Over routine should happen if green is clicked and the first item in sequence is not 3');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test if yellow is clicked and the first item in sequence is 4",
      "code": "const testYellowClickSequence4 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = t.getSprite('Ballerina');\n    await t.runUntil(() => ballerina.getList('sequence').length > 0, 5000);\n    if (ballerina.getList('sequence')[0] === 4) {\n        t.clickSprite('yellow');\n        await t.runForTime(1000);\n        t.assert.not(ballerina.getList('sequence').includes(4), 'The first item in sequence should be removed if it is 4 and yellow is clicked');\n    } else {\n        t.clickSprite('yellow');\n        await t.runForTime(1000);\n        t.assert.ok(ballerina.sayText.includes('Game over!'), 'Game Over routine should happen if yellow is clicked and the first item in sequence is not 4');\n    }\n    t.end();\n}"
    },
    {
      "name": "Test the Game Over routine",
      "code": "const testGameOverRoutine = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const ballerina = t.getSprite('Ballerina');\n    const initialHighScore = t.getGlobalVariable('high score');\n    const initialScore = t.getGlobalVariable('score');\n    await t.runUntil(() => ballerina.sayText.includes('Game over!'), 5000);\n    t.assert.ok(ballerina.sayText.includes('Game over!'), 'Ballerina should say Game over!');\n    if (initialScore > initialHighScore) {\n        t.assert.equal(t.getGlobalVariable('high score'), initialScore, 'High score should be updated if score is higher');\n        t.assert.ok(ballerina.sayText.includes('High Score! What is your name?'), 'Ballerina should ask for name if score is higher than high score');\n        t.typeText('TestName');\n        await t.runForTime(1000);\n        t.assert.equal(t.getGlobalVariable('name'), 'TestName', 'Global variable name should be set to the answer');\n    }\n    t.end();\n}"
    }
  ]
}