{
  "tests": [
    {
      "name": "Rocketship has size 100 at the start",
      "code": "const testRocketshipSize = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Rocketship').size === 100, 5000);\n    t.assert.equal(t.getSprite('Rocketship').size, 100, 'Rocketship should have size 100 at the start');\n    t.end();\n}"
    },
    {
      "name": "Rocketship has direction 0 at the start",
      "code": "const testRocketshipDirection = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Rocketship').direction === 0, 5000);\n    t.assert.equal(t.getSprite('Rocketship').direction, 0, 'Rocketship should have direction 0 at the start');\n    t.end();\n}"
    },
    {
      "name": "Rocketship has coordinates (-150, -150) at the start",
      "code": "const testRocketshipCoordinates = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Rocketship').x === -150 && t.getSprite('Rocketship').y === -150, 5000);\n    t.assert.equal(t.getSprite('Rocketship').x, -150, 'Rocketship should have x coordinate -150 at the start');\n    t.assert.equal(t.getSprite('Rocketship').y, -150, 'Rocketship should have y coordinate -150 at the start');\n    t.end();\n}"
    },
    {
      "name": "Rocketship says 'Let's go!' for 2 seconds",
      "code": "const testRocketshipSay = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Rocketship').sayText === \"Let's go!\", 5000);\n    t.assert.equal(t.getSprite('Rocketship').sayText, \"Let's go!\", 'Rocketship should say \"Let\\'s go!\"');\n    await t.runForTime(2000);\n    t.assert.equal(t.getSprite('Rocketship').sayText, '', 'Rocketship should stop saying \"Let\\'s go!\" after 2 seconds');\n    t.end();\n}"
    },
    {
      "name": "Rocketship direction points to Earth afterwards",
      "code": "const testRocketshipDirectionToEarth = async function (t) {\n    t.greenFlag();\n    await t.runForTime(5000); // Adjust time as needed to allow Rocketship to point to Earth\n    t.assert.equal(t.getSprite('Rocketship').direction, t.getSprite('Earth').direction, 'Rocketship direction should point to Earth');\n    t.end();\n}"
    },
    {
      "name": "Rocketship repeats sequence 200 times",
      "code": "const testRocketshipSequence = async function (t) {\n    t.greenFlag();\n    await t.runForTime(200 * 3 * 100); // 200 times, 3 actions, assuming each action takes 100ms\n    const rocketship = t.getSprite('Rocketship');\n    t.assert.equal(rocketship.size, 100 - 200 * 0.3, 'Rocketship size should decrease by 0.3 for 200 times');\n    t.assert.equal(rocketship.effects['color'], 200 * 25, 'Rocketship color effect should change by 25 for 200 times');\n    t.end();\n}"
    },
    {
      "name": "Monkey rotates right by 1 degree in a continuous loop",
      "code": "const testMonkeyRotation = async function (t) {\n    t.greenFlag();\n    const initialDirection = t.getSprite('Monkey').direction;\n    await t.runForTime(1000);\n    t.assert.notEqual(t.getSprite('Monkey').direction, initialDirection, 'Monkey should rotate right by 1 degree in a continuous loop');\n    t.end();\n}"
    },
    {
      "name": "Star increases and decreases size in a continuous loop",
      "code": "const testStarSizeLoop = async function (t) {\n    t.greenFlag();\n    const star = t.getSprite('Star');\n    const initialSize = star.size;\n    await t.runForTime(20 * 100); // 20 times increase\n    t.assert.equal(star.size, initialSize + 20 * 2, 'Star should increase size by 2 for 20 times');\n    await t.runForTime(20 * 100); // 20 times decrease\n    t.assert.equal(star.size, initialSize, 'Star should decrease size by 2 for 20 times');\n    t.end();\n}"
    },
    {
      "name": "Rock always has a direction pointing to Earth",
      "code": "const testRockDirectionToEarth = async function (t) {\n    t.greenFlag();\n    t.addConstraint(() => {\n        const rock = t.getSprite('Rock');\n        const earth = t.getSprite('Earth');\n        t.assert.equal(rock.direction, earth.direction, 'Rock should always have a direction pointing to Earth');\n    });\n    await t.runForTime(5000);\n    t.end();\n}"
    },
    {
      "name": "Rock continuously moves by 2 steps",
      "code": "const testRockContinuousMove = async function (t) {\n    t.greenFlag();\n    const initialX = t.getSprite('Rock').x;\n    const initialY = t.getSprite('Rock').y;\n    await t.runForTime(1000);\n    t.assert.notEqual(t.getSprite('Rock').x, initialX, 'Rock should continuously move by 2 steps');\n    t.assert.notEqual(t.getSprite('Rock').y, initialY, 'Rock should continuously move by 2 steps');\n    t.end();\n}"
    },
    {
      "name": "Rock changes direction when touching the edge of the stage",
      "code": "const testRockChangeDirectionOnEdge = async function (t) {\n    t.greenFlag();\n    const rock = t.getSprite('Rock');\n    const initialDirection = rock.direction;\n    await t.runUntil(() => rock.isTouchingEdge(), 5000);\n    await t.runForTime(100);\n    t.assert.notEqual(rock.direction, initialDirection, 'Rock should change direction when touching the edge of the stage');\n    t.end();\n}"
    }
  ]
}