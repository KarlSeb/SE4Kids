{
  "tests": [
    {
      "name": "Global variable score is 0 at the start",
      "code": "const testGlobalVariableScore = async function (t) {\n    t.seedScratch(1234);\n    await t.runUntil(() => t.getGlobalVariable('score') === 0, 1000);\n    t.assert.equal(t.getGlobalVariable('score'), 0, 'Score should be 0 at the start');\n    t.end();\n}"
    },
    {
      "name": "Global variable time is 10 at the start",
      "code": "const testGlobalVariableTime = async function (t) {\n    t.seedScratch(1234);\n    await t.runUntil(() => t.getGlobalVariable('time') === 10, 1000);\n    t.assert.equal(t.getGlobalVariable('time'), 10, 'Time should be 10 at the start');\n    t.end();\n}"
    },
    {
      "name": "Time is reduced by 1 every second until it reaches 0",
      "code": "const testTimeReduction = async function (t) {\n    t.seedScratch(1234);\n    let previousTime = t.getGlobalVariable('time');\n    while (previousTime > 0) {\n        await t.runForTime(1000);\n        let currentTime = t.getGlobalVariable('time');\n        t.assert.equal(currentTime, previousTime - 1, 'Time should be reduced by 1 every second');\n        previousTime = currentTime;\n    }\n    t.end();\n}"
    },
    {
      "name": "Ghost becomes invisible when clicked",
      "code": "const testGhostInvisibilityOnClick = async function (t) {\n    t.seedScratch(1234);\n    const ghost = await t.getSprite('Ghost');\n    await t.runForTime(1000);\n    t.clickSprite('Ghost');\n    await t.runForTime(100);\n    t.assert.not(ghost.visible, 'Ghost should become invisible when clicked');\n    t.end();\n}"
    },
    {
      "name": "Score is increased by 1 when Ghost is clicked",
      "code": "const testScoreIncreaseOnGhostClick = async function (t) {\n    t.seedScratch(1234);\n    await t.runForTime(1000);\n    const initialScore = t.getGlobalVariable('score');\n    t.clickSprite('Ghost');\n    await t.runForTime(100);\n    t.assert.equal(t.getGlobalVariable('score'), initialScore + 1, 'Score should increase by 1 when Ghost is clicked');\n    t.end();\n}"
    },
    {
      "name": "Ghost has a random size from 50 to 200",
      "code": "const testGhostRandomSize = async function (t) {\n    t.seedScratch(1234);\n    const ghost = await t.getSprite('Ghost');\n    await t.runForTime(1000);\n    t.assert.greaterOrEqual(ghost.size, 50, 'Ghost size should be at least 50');\n    t.assert.lessOrEqual(ghost.size, 200, 'Ghost size should be at most 200');\n    t.end();\n}"
    },
    {
      "name": "Ghost starts invisible",
      "code": "const testGhostStartsInvisible = async function (t) {\n    t.seedScratch(1234);\n    const ghost = await t.getSprite('Ghost');\n    await t.runForTime(1000);\n    t.assert.not(ghost.visible, 'Ghost should start invisible');\n    t.end();\n}"
    },
    {
      "name": "Ghost becomes visible after 1 second and is at a random location",
      "code": "const testGhostVisibleAfter1Second = async function (t) {\n    t.seedScratch(1234);\n    const ghost = await t.getSprite('Ghost');\n    await t.runForTime(1000);\n    t.assert.ok(ghost.visible, 'Ghost should be visible after 1 second');\n    t.assert.greaterOrEqual(ghost.x, -240, 'Ghost should be within stage bounds');\n    t.assert.lessOrEqual(ghost.x, 240, 'Ghost should be within stage bounds');\n    t.assert.greaterOrEqual(ghost.y, -180, 'Ghost should be within stage bounds');\n    t.assert.lessOrEqual(ghost.y, 180, 'Ghost should be within stage bounds');\n    t.end();\n}"
    },
    {
      "name": "Ghost stays visible for a random amount of time between 1 and 2 seconds",
      "code": "const testGhostVisibleDuration = async function (t) {\n    t.seedScratch(1234);\n    const ghost = await t.getSprite('Ghost');\n    await t.runForTime(1000);\n    t.assert.ok(ghost.visible, 'Ghost should be visible after 1 second');\n    await t.runForTime(1000);\n    t.assert.ok(ghost.visible, 'Ghost should still be visible after 2 seconds');\n    await t.runForTime(1000);\n    t.assert.not(ghost.visible, 'Ghost should not be visible after 3 seconds');\n    t.end();\n}"
    },
    {
      "name": "Bat and Ghost3 have the same behavior as Ghost",
      "code": "const testBatAndGhost3Behavior = async function (t) {\n    t.seedScratch(1234);\n    const bat = await t.getSprite('Bat');\n    const ghost3 = await t.getSprite('Ghost3');\n    await t.runForTime(1000);\n    t.assert.not(bat.visible, 'Bat should start invisible');\n    t.assert.not(ghost3.visible, 'Ghost3 should start invisible');\n    await t.runForTime(1000);\n    t.assert.ok(bat.visible, 'Bat should be visible after 1 second');\n    t.assert.ok(ghost3.visible, 'Ghost3 should be visible after 1 second');\n    await t.runForTime(1000);\n    t.assert.ok(bat.visible, 'Bat should still be visible after 2 seconds');\n    t.assert.ok(ghost3.visible, 'Ghost3 should still be visible after 2 seconds');\n    await t.runForTime(1000);\n    t.assert.not(bat.visible, 'Bat should not be visible after 3 seconds');\n    t.assert.not(ghost3.visible, 'Ghost3 should not be visible after 3 seconds');\n    t.end();\n}"
    }
  ]
}