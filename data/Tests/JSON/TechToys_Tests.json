{
  "tests": [
    {
      "name": "Sunglasses2 changes color effect by 5 100 times when clicked",
      "code": "const testSunglasses2ColorChange = async function (t) {\n    t.seedScratch(1234);\n    const sunglasses2 = await t.getSprite('Sunglasses2');\n    await t.clickSprite('Sunglasses2');\n    await t.runForTime(1000);\n    t.assert.equal(sunglasses2.effects['color'], 500, 'Sunglasses2 should change color effect by 5 100 times');\n    t.end();\n}"
    },
    {
      "name": "Bow Tie turns right by 36 degrees 30 times when clicked",
      "code": "const testBowTieTurnRight = async function (t) {\n    t.seedScratch(1234);\n    const bowTie = await t.getSprite('Bow Tie');\n    await t.clickSprite('Bow Tie');\n    await t.runForTime(1000);\n    t.assert.equal(bowTie.direction, 1080, 'Bow Tie should turn right by 36 degrees 30 times');\n    t.end();\n}"
    },
    {
      "name": "Helicopter changes costumes repeatedly after Laptop is clicked",
      "code": "const testHelicopterCostumeChange = async function (t) {\n    t.seedScratch(1234);\n    await t.clickSprite('Laptop');\n    const helicopter = await t.getSprite('Helicopter');\n    const initialCostume = helicopter.currentCostume;\n    await t.runForTime(1000);\n    t.assert.notEqual(helicopter.currentCostume, initialCostume, 'Helicopter should change costumes repeatedly after Laptop is clicked');\n    t.end();\n}"
    },
    {
      "name": "Helicopter x coordinate changes by -2 when left arrow key is pressed after Laptop is clicked",
      "code": "const testHelicopterMoveLeft = async function (t) {\n    t.seedScratch(1234);\n    await t.clickSprite('Laptop');\n    const helicopter = await t.getSprite('Helicopter');\n    const initialX = helicopter.x;\n    await t.keyPress('left arrow');\n    await t.runForTime(1000);\n    t.assert.equal(helicopter.x, initialX - 2, 'Helicopter x coordinate should change by -2 when left arrow key is pressed after Laptop is clicked');\n    t.end();\n}"
    },
    {
      "name": "Helicopter x coordinate changes by +2 when right arrow key is pressed after Laptop is clicked",
      "code": "const testHelicopterMoveRight = async function (t) {\n    t.seedScratch(1234);\n    await t.clickSprite('Laptop');\n    const helicopter = await t.getSprite('Helicopter');\n    const initialX = helicopter.x;\n    await t.keyPress('right arrow');\n    await t.runForTime(1000);\n    t.assert.equal(helicopter.x, initialX + 2, 'Helicopter x coordinate should change by +2 when right arrow key is pressed after Laptop is clicked');\n    t.end();\n}"
    },
    {
      "name": "Helicopter y coordinate changes by -2 when down arrow key is pressed after Laptop is clicked",
      "code": "const testHelicopterMoveDown = async function (t) {\n    t.seedScratch(1234);\n    await t.clickSprite('Laptop');\n    const helicopter = await t.getSprite('Helicopter');\n    const initialY = helicopter.y;\n    await t.keyPress('down arrow');\n    await t.runForTime(1000);\n    t.assert.equal(helicopter.y, initialY - 2, 'Helicopter y coordinate should change by -2 when down arrow key is pressed after Laptop is clicked');\n    t.end();\n}"
    },
    {
      "name": "Helicopter y coordinate changes by +2 when up arrow key is pressed after Laptop is clicked",
      "code": "const testHelicopterMoveUp = async function (t) {\n    t.seedScratch(1234);\n    await t.clickSprite('Laptop');\n    const helicopter = await t.getSprite('Helicopter');\n    const initialY = helicopter.y;\n    await t.keyPress('up arrow');\n    await t.runForTime(1000);\n    t.assert.equal(helicopter.y, initialY + 2, 'Helicopter y coordinate should change by +2 when up arrow key is pressed after Laptop is clicked');\n    t.end();\n}"
    },
    {
      "name": "Helicopter repeats moving 4 steps and turning 4 degrees left 90 times when space is pressed",
      "code": "const testHelicopterMoveAndTurn = async function (t) {\n    t.seedScratch(1234);\n    const helicopter = await t.getSprite('Helicopter');\n    const initialX = helicopter.x;\n    const initialY = helicopter.y;\n    const initialDirection = helicopter.direction;\n    await t.keyPress('space');\n    await t.runForTime(1000);\n    t.assert.notEqual(helicopter.x, initialX, 'Helicopter should move when space is pressed');\n    t.assert.notEqual(helicopter.y, initialY, 'Helicopter should move when space is pressed');\n    t.assert.notEqual(helicopter.direction, initialDirection, 'Helicopter should turn when space is pressed');\n    t.end();\n}"
    }
  ]
}