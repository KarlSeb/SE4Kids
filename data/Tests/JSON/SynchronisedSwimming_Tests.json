{
  "tests": [
    {
      "name": "Cat1 Flying starts at coordinates (0, 0)",
      "code": "const testCat1FlyingStartCoordinates = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => {\n        const sprite = t.getSprite('Cat1 Flying');\n        return sprite.x === 0 && sprite.y === 0;\n    }, 1000);\n    const sprite = t.getSprite('Cat1 Flying');\n    t.assert.strictEqual(sprite.x, 0, 'Cat1 Flying should start at x = 0');\n    t.assert.strictEqual(sprite.y, 0, 'Cat1 Flying should start at y = 0');\n    t.end();\n}"
    },
    {
      "name": "Cat1 Flying starts with direction 90",
      "code": "const testCat1FlyingStartDirection = async function (t) {\n    t.greenFlag();\n    await t.runUntil(() => {\n        const sprite = t.getSprite('Cat1 Flying');\n        return sprite.direction === 90;\n    }, 1000);\n    const sprite = t.getSprite('Cat1 Flying');\n    t.assert.strictEqual(sprite.direction, 90, 'Cat1 Flying should start with direction 90');\n    t.end();\n}"
    },
    {
      "name": "Cat1 Flying repeats turning right 60 degrees and creating a clone 6 times",
      "code": "const testCat1FlyingCloneCreation = async function (t) {\n    t.greenFlag();\n    await t.runForTime(1000);\n    const sprite = t.getSprite('Cat1 Flying');\n    t.assert.strictEqual(sprite.getCloneCount(), 6, 'Cat1 Flying should create 6 clones');\n    t.end();\n}"
    },
    {
      "name": "Up arrow key moves sprite and clones 10 steps",
      "code": "const testUpArrowMovesSpriteAndClones = async function (t) {\n    t.greenFlag();\n    await t.runForTime(1000);\n    const sprite = t.getSprite('Cat1 Flying');\n    const initialX = sprite.x;\n    const initialY = sprite.y;\n    t.keyPress('up');\n    await t.runForTime(100);\n    t.assert.strictEqual(sprite.x, initialX + 10, 'Cat1 Flying should move 10 steps to the right');\n    t.assert.strictEqual(sprite.y, initialY, 'Cat1 Flying should not move vertically');\n    const clones = sprite.getClones();\n    clones.forEach((clone, index) => {\n        t.assert.strictEqual(clone.x, initialX + 10, `Clone ${index} should move 10 steps to the right`);\n        t.assert.strictEqual(clone.y, initialY, `Clone ${index} should not move vertically`);\n    });\n    t.end();\n}"
    },
    {
      "name": "Down arrow key moves sprite and clones -10 steps",
      "code": "const testDownArrowMovesSpriteAndClones = async function (t) {\n    t.greenFlag();\n    await t.runForTime(1000);\n    const sprite = t.getSprite('Cat1 Flying');\n    const initialX = sprite.x;\n    const initialY = sprite.y;\n    t.keyPress('down');\n    await t.runForTime(100);\n    t.assert.strictEqual(sprite.x, initialX - 10, 'Cat1 Flying should move -10 steps to the left');\n    t.assert.strictEqual(sprite.y, initialY, 'Cat1 Flying should not move vertically');\n    const clones = sprite.getClones();\n    clones.forEach((clone, index) => {\n        t.assert.strictEqual(clone.x, initialX - 10, `Clone ${index} should move -10 steps to the left`);\n        t.assert.strictEqual(clone.y, initialY, `Clone ${index} should not move vertically`);\n    });\n    t.end();\n}"
    },
    {
      "name": "Left arrow key turns sprite and clones 15 degrees to the left",
      "code": "const testLeftArrowTurnsSpriteAndClones = async function (t) {\n    t.greenFlag();\n    await t.runForTime(1000);\n    const sprite = t.getSprite('Cat1 Flying');\n    const initialDirection = sprite.direction;\n    t.keyPress('left');\n    await t.runForTime(100);\n    t.assert.strictEqual(sprite.direction, initialDirection - 15, 'Cat1 Flying should turn 15 degrees to the left');\n    const clones = sprite.getClones();\n    clones.forEach((clone, index) => {\n        t.assert.strictEqual(clone.direction, initialDirection - 15, `Clone ${index} should turn 15 degrees to the left`);\n    });\n    t.end();\n}"
    },
    {
      "name": "Left arrow key switches sprite and clones costumes to 'left'",
      "code": "const testLeftArrowSwitchesCostume = async function (t) {\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.keyPress('left');\n    await t.runForTime(100);\n    const sprite = t.getSprite('Cat1 Flying');\n    t.assert.strictEqual(sprite.getCostumeByName('left').name, 'left', 'Cat1 Flying should switch costume to left');\n    const clones = sprite.getClones();\n    clones.forEach((clone, index) => {\n        t.assert.strictEqual(clone.getCostumeByName('left').name, 'left', `Clone ${index} should switch costume to left`);\n    });\n    t.end();\n}"
    },
    {
      "name": "Right arrow key turns sprite and clones 15 degrees to the right",
      "code": "const testRightArrowTurnsSpriteAndClones = async function (t) {\n    t.greenFlag();\n    await t.runForTime(1000);\n    const sprite = t.getSprite('Cat1 Flying');\n    const initialDirection = sprite.direction;\n    t.keyPress('right');\n    await t.runForTime(100);\n    t.assert.strictEqual(sprite.direction, initialDirection + 15, 'Cat1 Flying should turn 15 degrees to the right');\n    const clones = sprite.getClones();\n    clones.forEach((clone, index) => {\n        t.assert.strictEqual(clone.direction, initialDirection + 15, `Clone ${index} should turn 15 degrees to the right`);\n    });\n    t.end();\n}"
    },
    {
      "name": "Right arrow key switches sprite and clones costumes to 'right'",
      "code": "const testRightArrowSwitchesCostume = async function (t) {\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.keyPress('right');\n    await t.runForTime(100);\n    const sprite = t.getSprite('Cat1 Flying');\n    t.assert.strictEqual(sprite.getCostumeByName('right').name, 'right', 'Cat1 Flying should switch costume to right');\n    const clones = sprite.getClones();\n    clones.forEach((clone, index) => {\n        t.assert.strictEqual(clone.getCostumeByName('right').name, 'right', `Clone ${index} should switch costume to right`);\n    });\n    t.end();\n}"
    },
    {
      "name": "Space key makes sprite and clones repeat sequence 36 times",
      "code": "const testSpaceKeySequence = async function (t) {\n    t.greenFlag();\n    await t.runForTime(1000);\n    const sprite = t.getSprite('Cat1 Flying');\n    const initialDirection = sprite.direction;\n    const initialX = sprite.x;\n    const initialY = sprite.y;\n    t.keyPress('space');\n    await t.runForTime(1000);\n    t.assert.strictEqual(sprite.direction, initialDirection + 360, 'Cat1 Flying should turn 360 degrees');\n    t.assert.strictEqual(sprite.x, initialX + 360, 'Cat1 Flying should move 360 steps to the right');\n    t.assert.strictEqual(sprite.y, initialY, 'Cat1 Flying should not move vertically');\n    const clones = sprite.getClones();\n    clones.forEach((clone, index) => {\n        t.assert.strictEqual(clone.direction, initialDirection + 360, `Clone ${index} should turn 360 degrees`);\n        t.assert.strictEqual(clone.x, initialX + 360, `Clone ${index} should move 360 steps to the right`);\n        t.assert.strictEqual(clone.y, initialY, `Clone ${index} should not move vertically`);\n    });\n    t.end();\n}"
    }
  ]
}