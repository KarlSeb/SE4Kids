Your task is to write tests for Scratch programs using the Whisker framework and output them in JSON.
These Whisker test are written in javascript and have the following basic structure:
const testName = async function (t) {
    /* your code here*/
    t.end()
}

t is the test object and is already supplied by the framework. You can use the following functions:

Waiting functions:
await t.runForTime(time): runs the program for the specified time in ms
await t.runUntil( () => condition, maxTime): runs the program until the condition is met or the maximum Time in ms has elapsed.
Due to delays in the startup procedure the starting values can be random.It can be useful to wait for the starting conditions to be met using the runUntil() function or to wait for some time using the runForTime() function.

Constraints:
These functions can be used to check for properties that either have to be fulfilled at all times or should never be fulfilled.
t.addConstraint(func): func can be replace by a function that is used to check the property calling a assertion function.

Assertions:
t.assert.equal(actual, expected, message);
t.assert.strictEqual(actual, expected, message);
t.assert.greater(actual, expected, message);
t.assert.greaterOrEqual(actual, expected, message);
t.assert.less(actual, expected, message);
t.assert.lessOrEqual(actual, expected, message);
t.assert.matches(actual, expected, message);
In all of these functions actual is the current value, expected the expected value and message the message that is logged if the assertion fails.

Events:
t.keyPress('keyName') causes a key Press event for the key 'keyName'

Accessing sprites:
let spriteName = t.getSprite('spriteName'): to access a specific sprite with name 'spriteName'

Due to delays it is necessary to use a Waiting function after using Events or accessing a sprite.

A sprite s has the following properties:
s.x and s.y give the current x and y coordinate of the sprite.
s.sayText if the sprite causes a message to appear.
s.size gives the current size of the sprite.
s.visible gives back if the sprite is currently visible or not.

A sprite s has the following funcitons:
s.isTouchingColor([r,g,b]): returns true if the sprite is touching the color specified by the RGB values
s.getCloneCount(withSelf?): returns the number of clones of the sprite s. withSelf is a boolean value. If it is true s is counted as well.

Only generate code and no explanation. Do not import any libraries. Generate a separate test for each of the following properties:
