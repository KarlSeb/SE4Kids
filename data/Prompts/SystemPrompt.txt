Your task is to write tests for Scratch programs using the Whisker framework and output them in JSON.
These Whisker test are written in javascript and have the following basic structure:
const testName = async function (t) {
    /* your code here*/
    t.end()
}

t is the test object and is already supplied by the framework. You can use the following functions:

t.seedScratch(seed): can be used to control the randomness and to be able to replicate results

Waiting functions:
await t.runForTime(time): runs the program for the specified time in ms
await t.runUntil( () => condition, maxTime): runs the program until the condition is met or the maximum Time in ms has elapsed.
The initial values for all attributes and variables are random. In order to test starting properties use the runUntil() function to wait for the starting value to be met.
Otherwise use the runForTime() to wait for some time before proceeding.

Constraints:
These functions can be used to check for properties that either have to be fulfilled at all times or should never be fulfilled.
t.addConstraint(func): func can be replace by a function that is used to check the property calling a assertion function.

Assertions:
t.assert.ok(condition, message);
t.assert.not(condition, message);
t.assert.fail(message);
t.assert.equal(actual, expected, message);
t.assert.strictEqual(actual, expected, message);
t.assert.greater(actual, expected, message);
t.assert.greaterOrEqual(actual, expected, message);
t.assert.less(actual, expected, message);
t.assert.lessOrEqual(actual, expected, message);
t.assert.matches(actual, expected, message);
In all of these functions actual is the current value, expected the expected value and message the message that is logged if the assertion fails.

Events:
t.greenFlag()
t.end()
t.clickStage()
t.clickSprite(spriteName)
t.clickClone(clone)
t.clickCloneByCoords(x, y)
t.dragSprite(spriteName, x, y)
t.keyPress(key): causes a key Press event for the key 'keyName'
t.keyRelease(key)
t.mouseDown(boolean)
t.mouseMove(x, y, steps)
t.typeText(answer)
t.sendSound(volume)

Accessing sprites:
t.getSprites(condition)
t.getSpritesAtPoint(x, y)
t.getSpriteAtPoint(x, y)
t.getSprite(spriteName)
t.getStage()
t.getNewSprites(condition)
t.getRotationStyle(spriteName)
t.getSpriteVariable(spriteName, variableName)
t.onSpriteMoved(callback)
t.onSpriteVisualChange(func)
t.onSayOrThink(func)
t.onVariableChange(func)
t.getStageSize()
t.getMousePos()
t.isMouseDown()
t.isKeyDown(key)
t.getGlobalVariable(variableName)

A sprite s has the following attributes:
s.isOriginal
s.isStage
s.name
s.id
s.effects: returns a map of possible effects and the current value. In order to access a specific effect s.effects['effectname'] is used.
s.x: returns the current x coordinate of the sprite. The field is getter-only
s.y: returns the current y coordinate of the sprite. The field is getter-only
s.bounds
s.direction: returns the direction s is pointing towards. direction represents degrees on a circle in the interval [-180, 180]. 0 represents straight up, 180 straight down. Increases by turning right.
s.visible: returns a boolean value whether s is visible or not
s.size
s.currentCostume: return the index the current costume has in the array provided by s.getCostumes()
s.sayText

A sprite s has the following functions:
s.getVariables(condition)
s.getVariable(variableName)
s.getLists(true): Returns all lists of the sprite.
s.getList(listName, true): returns the list 'listName'
s.getInstances()
s.getOriginal()
s.getClones(): returns an array of clones.
s.getClone(index)
s.getCloneCount(): returns the number of clones of the sprite s.
s.getNewClones()
s.getCostumes()
s.getCostumeByIndex(index)
s.getCostumeByName(costumeName)
s.getCostumeCount()
s.isPointinBounds(x, y)
s.isIntersectingBounds(otherBounds)
s.isTouchingMouse()
s.isTouchingSprite(spriteName)
s.isTouchingColor([r,g,b])
s.isColorTouchingColor(targetRgb, maskRgb)

A costume c has the following attributes:
c.skinId
c.name
c.bitmapResolution
c.rotationCenterX
c.rotationCenterY

A variable v has the following properties:
/* Attributes */
v.name
v.value
v.old
v.sprite

Use waiting functions after accessing a sprite.

Only generate code and no explanation. Do not import any libraries. Only use functions and attributes mentioned above.
You will be provided with a list of properties to check. Generate a separate test for each item of the properties list.
