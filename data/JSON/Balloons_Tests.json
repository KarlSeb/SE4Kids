{
  "tests": [
    {
      "name": "Global time variable starts at 10",
      "code": "const testGlobalTimeStartsAt10 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('time') === 10, 1000);\n    t.assert.equal(t.getGlobalVariable('time'), 10, 'Global time variable should start at 10');\n    t.end();\n}"
    },
    {
      "name": "Global score variable starts at 0",
      "code": "const testGlobalScoreStartsAt0 = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('score') === 0, 1000);\n    t.assert.equal(t.getGlobalVariable('score'), 0, 'Global score variable should start at 0');\n    t.end();\n}"
    },
    {
      "name": "Balloon1 sprite is hidden",
      "code": "const testBalloon1SpriteIsHidden = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').visible === false, 1000);\n    t.assert.not(t.getSprite('Balloon1').visible, 'Balloon1 sprite should be hidden');\n    t.end();\n}"
    },
    {
      "name": "At the start there are 30 clones of the Balloon1 sprite",
      "code": "const test30ClonesOfBalloon1Sprite = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    t.assert.equal(t.getSprite('Balloon1').getCloneCount(), 30, 'There should be 30 clones of the Balloon1 sprite at the start');\n    t.end();\n}"
    },
    {
      "name": "Every clone is visible at the start",
      "code": "const testEveryCloneIsVisibleAtStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const clones = t.getSprite('Balloon1').getClones();\n    clones.forEach(clone => t.assert.ok(clone.visible, 'Every clone should be visible at the start'));\n    t.end();\n}"
    },
    {
      "name": "Each clone starts with costume 'balloon1-a'",
      "code": "const testEachCloneStartsWithCostumeBalloon1A = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const clones = t.getSprite('Balloon1').getClones();\n    clones.forEach(clone => t.assert.equal(clone.getCostumeByIndex(clone.currentCostume).name, 'balloon1-a', 'Each clone should start with costume balloon1-a'));\n    t.end();\n}"
    },
    {
      "name": "The clones start at a random location in the interval [-150, 150]",
      "code": "const testClonesStartAtRandomLocation = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const clones = t.getSprite('Balloon1').getClones();\n    clones.forEach(clone => {\n        t.assert.greaterOrEqual(clone.x, -150, 'Clone x should be >= -150');\n        t.assert.lessOrEqual(clone.x, 150, 'Clone x should be <= 150');\n        t.assert.greaterOrEqual(clone.y, -150, 'Clone y should be >= -150');\n        t.assert.lessOrEqual(clone.y, 150, 'Clone y should be <= 150');\n    });\n    t.end();\n}"
    },
    {
      "name": "Each clone points in a random direction in the interval [-90, 180]",
      "code": "const testClonesPointInRandomDirection = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const clones = t.getSprite('Balloon1').getClones();\n    clones.forEach(clone => {\n        t.assert.greaterOrEqual(clone.direction, -90, 'Clone direction should be >= -90');\n        t.assert.lessOrEqual(clone.direction, 180, 'Clone direction should be <= 180');\n    });\n    t.end();\n}"
    },
    {
      "name": "Each clone applies a random color effect between 1 and 200",
      "code": "const testClonesApplyRandomColorEffect = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const clones = t.getSprite('Balloon1').getClones();\n    clones.forEach(clone => {\n        const colorEffect = clone.effects.get('color');\n        t.assert.greaterOrEqual(colorEffect, 1, 'Clone color effect should be >= 1');\n        t.assert.lessOrEqual(colorEffect, 200, 'Clone color effect should be <= 200');\n    });\n    t.end();\n}"
    },
    {
      "name": "When a balloon is clicked its costume switches to 'burst'",
      "code": "const testBalloonClickSwitchesCostumeToBurst = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const clone = t.getSprite('Balloon1').getClone(0);\n    t.clickClone(clone);\n    await t.runForTime(100);\n    t.assert.equal(clone.getCostumeByIndex(clone.currentCostume).name, 'burst', 'Balloon costume should switch to burst when clicked');\n    t.end();\n}"
    },
    {
      "name": "When a balloon is clicked 1 is added to the score",
      "code": "const testBalloonClickAddsToScore = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const initialScore = t.getGlobalVariable('score');\n    const clone = t.getSprite('Balloon1').getClone(0);\n    t.clickClone(clone);\n    await t.runForTime(100);\n    t.assert.equal(t.getGlobalVariable('score'), initialScore + 1, 'Score should increase by 1 when a balloon is clicked');\n    t.end();\n}"
    },
    {
      "name": "When a balloon is clicked it is deleted",
      "code": "const testBalloonClickDeletesClone = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const clone = t.getSprite('Balloon1').getClone(0);\n    t.clickClone(clone);\n    await t.runForTime(100);\n    t.assert.equal(t.getSprite('Balloon1').getCloneCount(), 29, 'Clone should be deleted when clicked');\n    t.end();\n}"
    },
    {
      "name": "When a balloon touches the edge of the stage the balloon changes direction",
      "code": "const testBalloonTouchesEdgeChangesDirection = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Balloon1').getCloneCount() === 30, 1000);\n    const clone = t.getSprite('Balloon1').getClone(0);\n    const initialDirection = clone.direction;\n    t.dragSprite(clone.name, 240, 0); // Drag to the edge\n    await t.runForTime(100);\n    t.assert.notEqual(clone.direction, initialDirection, 'Balloon should change direction when it touches the edge');\n    t.end();\n}"
    },
    {
      "name": "Every second the time is decreased by 1",
      "code": "const testTimeDecreasesEverySecond = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    const initialTime = t.getGlobalVariable('time');\n    await t.runForTime(1000);\n    t.assert.equal(t.getGlobalVariable('time'), initialTime - 1, 'Time should decrease by 1 every second');\n    t.end();\n}"
    },
    {
      "name": "After the time reaches 0 the timer does not decrease any more",
      "code": "const testTimerStopsAtZero = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('time') === 0, 10000);\n    await t.runForTime(2000);\n    t.assert.equal(t.getGlobalVariable('time'), 0, 'Timer should not decrease after reaching 0');\n    t.end();\n}"
    }
  ]
}