{
  "tests": [
    {
      "name": "At the start Nano has costume 'nano-a'",
      "code": "const testNanoStartCostume = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.getCostumeByIndex(nano.currentCostume).name, 'nano-a', 'Nano should start with costume nano-a');\n    t.end();\n};"
    },
    {
      "name": "When Nano is clicked the costume changes to 'nano-b'",
      "code": "const testNanoClickCostumeChange = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.getCostumeByIndex(nano.currentCostume).name, 'nano-b', 'Nano should change to costume nano-b when clicked');\n    t.end();\n};"
    },
    {
      "name": "When Nano is clicked the stage costume is set to 'space'",
      "code": "const testStageCostumeChangeOnNanoClick = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    const stage = t.getStage();\n    t.assert.strictEqual(stage.getCostumeByIndex(stage.currentCostume).name, 'space', 'Stage costume should change to space when Nano is clicked');\n    t.end();\n};"
    },
    {
      "name": "After Nano is clicked Nano asks 'What's your name?'",
      "code": "const testNanoAsksName = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, \"What's your name?\", \"Nano should ask 'What's your name?' after being clicked\");\n    t.end();\n};"
    },
    {
      "name": "After the question 'What's your name?' is answered the answer is stored in the global variable 'name'",
      "code": "const testNameStoredInGlobalVariable = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(1000);\n    const name = t.getGlobalVariable('name');\n    t.assert.strictEqual(name.value, 'Alice', \"The answer to 'What's your name?' should be stored in the global variable 'name'\");\n    t.end();\n};"
    },
    {
      "name": "After the question 'What's your name?' is answered Nano says 'Hi [name]' for 2 seconds",
      "code": "const testNanoSaysHi = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, 'Hi Alice', \"Nano should say 'Hi [name]' after the name is answered\");\n    t.end();\n};"
    },
    {
      "name": "Then Nano asks 'Are you OK [name]'",
      "code": "const testNanoAsksAreYouOK = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, 'Are you OK Alice', \"Nano should ask 'Are you OK [name]' after saying 'Hi [name]'\");\n    t.end();\n};"
    },
    {
      "name": "If the answer to 'Are you OK [name]' is 'yes' Nano's costume changes to 'nano-c'",
      "code": "const testNanoCostumeChangeToC = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('yes');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.getCostumeByIndex(nano.currentCostume).name, 'nano-c', \"Nano's costume should change to 'nano-c' if the answer to 'Are you OK [name]' is 'yes'\");\n    t.end();\n};"
    },
    {
      "name": "If the answer to 'Are you OK [name]' is 'yes' Nano says 'That's great to hear!' for 2 seconds",
      "code": "const testNanoSaysGreatToHear = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('yes');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, \"That's great to hear!\", \"Nano should say 'That's great to hear!' if the answer to 'Are you OK [name]' is 'yes'\");\n    t.end();\n};"
    },
    {
      "name": "If the answer to 'Are you OK [name]' is not 'yes' Nano's costume changes to 'nano-d'",
      "code": "const testNanoCostumeChangeToD = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('no');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.getCostumeByIndex(nano.currentCostume).name, 'nano-d', \"Nano's costume should change to 'nano-d' if the answer to 'Are you OK [name]' is not 'yes'\");\n    t.end();\n};"
    },
    {
      "name": "If the answer to 'Are you OK [name]' is not 'yes' Nano says 'Oh no!' for 2 seconds",
      "code": "const testNanoSaysOhNo = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('no');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, 'Oh no!', \"Nano should say 'Oh no!' if the answer to 'Are you OK [name]' is not 'yes'\");\n    t.end();\n};"
    },
    {
      "name": "Then Nano's costume changes to 'nano-b'",
      "code": "const testNanoCostumeChangeBackToB = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('no');\n    await t.runForTime(3000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.getCostumeByIndex(nano.currentCostume).name, 'nano-b', \"Nano's costume should change back to 'nano-b'\");\n    t.end();\n};"
    },
    {
      "name": "Nano then asks 'Do you want to go to the moon?'",
      "code": "const testNanoAsksGoToMoon = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('no');\n    await t.runForTime(3000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, 'Do you want to go to the moon?', \"Nano should ask 'Do you want to go to the moon?'\");\n    t.end();\n};"
    },
    {
      "name": "If the answer to 'Do you want to go to the moon?' is 'yes' the stage costume changes to 'moon'",
      "code": "const testStageCostumeChangeToMoon = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('no');\n    await t.runForTime(3000);\n    t.typeText('yes');\n    await t.runForTime(1000);\n    const stage = t.getStage();\n    t.assert.strictEqual(stage.getCostumeByIndex(stage.currentCostume).name, 'moon', \"Stage costume should change to 'moon' if the answer to 'Do you want to go to the moon?' is 'yes'\");\n    t.end();\n};"
    },
    {
      "name": "If the answer to 'Do you want to go to the moon?' is 'yes' Nano moves up, waits 0.1 seconds, moves down and waits 0.1 seconds for 4 times",
      "code": "const testNanoMovesUpDown = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('no');\n    await t.runForTime(3000);\n    t.typeText('yes');\n    await t.runForTime(1000);\n    const nano = t.getSprite('Nano');\n    const initialY = nano.y;\n    for (let i = 0; i < 4; i++) {\n        await t.runForTime(100);\n        t.assert.notStrictEqual(nano.y, initialY, 'Nano should move up');\n        await t.runForTime(100);\n        t.assert.strictEqual(nano.y, initialY, 'Nano should move down');\n    }\n    t.end();\n};"
    },
    {
      "name": "If the answer to 'Do you want to go to the moon?' is not 'yes' the program ends",
      "code": "const testProgramEndsIfNotYes = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Nano').currentCostume === 0, 5000);\n    t.clickSprite('Nano');\n    await t.runForTime(1000);\n    t.typeText('Alice');\n    await t.runForTime(3000);\n    t.typeText('no');\n    await t.runForTime(3000);\n    const nano = t.getSprite('Nano');\n    t.assert.strictEqual(nano.sayText, '', 'Program should end if the answer to Do you want to go to the moon? is not yes');\n    t.end();\n};"
    }
  ]
}