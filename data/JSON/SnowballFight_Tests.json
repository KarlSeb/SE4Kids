{
  "tests": [
    {
      "name": "At the start of a round the global variable power is 0",
      "code": "const testPowerAtStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getGlobalVariable('power') === 0, 5000);\n    t.assert.strictEqual(t.getGlobalVariable('power'), 0, 'Power should be 0 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has coordinates (-200, -130)",
      "code": "const testSnowballCoordinatesAtStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => {\n        const snowball = t.getSprite('Snowball');\n        return snowball.x === -200 && snowball.y === -130;\n    }, 5000);\n    const snowball = t.getSprite('Snowball');\n    t.assert.strictEqual(snowball.x, -200, 'Snowball x should be -200 at the start of a round');\n    t.assert.strictEqual(snowball.y, -130, 'Snowball y should be -130 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has direction 90",
      "code": "const testSnowballDirectionAtStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Snowball').direction === 90, 5000);\n    t.assert.strictEqual(t.getSprite('Snowball').direction, 90, 'Snowball direction should be 90 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball has costume 'snowball-aim'",
      "code": "const testSnowballCostumeAtStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Snowball').getCostumeByName('snowball-aim') !== undefined, 5000);\n    t.assert.strictEqual(t.getSprite('Snowball').getCostumeByName('snowball-aim').name, 'snowball-aim', 'Snowball should have costume snowball-aim at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Snowball is visible",
      "code": "const testSnowballVisibilityAtStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => t.getSprite('Snowball').visible, 5000);\n    t.assert.ok(t.getSprite('Snowball').visible, 'Snowball should be visible at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "Until mouse is down Snowball points towards the mouse pointer",
      "code": "const testSnowballPointsTowardsMouse = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.addConstraint(() => {\n        const snowball = t.getSprite('Snowball');\n        const mousePos = t.getMousePos();\n        const angle = Math.atan2(mousePos.y - snowball.y, mousePos.x - snowball.x) * 180 / Math.PI;\n        t.assert.strictEqual(snowball.direction, angle, 'Snowball should point towards the mouse pointer');\n    });\n    t.end();\n}"
    },
    {
      "name": "While mouse is down and while power is less than 20 the direction of Snowball points towards the mouse pointer",
      "code": "const testSnowballDirectionWhileMouseDown = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.addConstraint(() => {\n        const snowball = t.getSprite('Snowball');\n        const mousePos = t.getMousePos();\n        const angle = Math.atan2(mousePos.y - snowball.y, mousePos.x - snowball.x) * 180 / Math.PI;\n        t.assert.strictEqual(snowball.direction, angle, 'Snowball should point towards the mouse pointer while mouse is down and power is less than 20');\n    });\n    t.end();\n}"
    },
    {
      "name": "While mouse is down and while power is less than 20 power increases by 1",
      "code": "const testPowerIncreaseWhileMouseDown = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    let initialPower = t.getGlobalVariable('power');\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.assert.strictEqual(t.getGlobalVariable('power'), initialPower + 20, 'Power should increase by 1 while mouse is down and power is less than 20');\n    t.end();\n}"
    },
    {
      "name": "After mouse is released Snowball switches to costume 'snowball'",
      "code": "const testSnowballCostumeAfterMouseRelease = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    await t.runForTime(1000);\n    t.assert.strictEqual(t.getSprite('Snowball').getCostumeByName('snowball').name, 'snowball', 'Snowball should switch to costume snowball after mouse is released');\n    t.end();\n}"
    },
    {
      "name": "Until Snowball touches the edge of the stage or Rocks the y coordinate is changed by -5",
      "code": "const testSnowballYChangeUntilTouch = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    let initialY = t.getSprite('Snowball').y;\n    await t.runUntil(() => t.getSprite('Snowball').isTouchingSprite('Rocks') || t.getSprite('Snowball').isTouchingEdge(), 10000);\n    t.assert.strictEqual(t.getSprite('Snowball').y, initialY - 5, 'Snowball y coordinate should change by -5 until it touches the edge of the stage or Rocks');\n    t.end();\n}"
    },
    {
      "name": "Until Snowball touches the edge of the stage or Rocks Snowball moves power steps",
      "code": "const testSnowballMovesPowerSteps = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    let initialX = t.getSprite('Snowball').x;\n    await t.runUntil(() => t.getSprite('Snowball').isTouchingSprite('Rocks') || t.getSprite('Snowball').isTouchingEdge(), 10000);\n    t.assert.strictEqual(t.getSprite('Snowball').x, initialX + t.getGlobalVariable('power'), 'Snowball should move power steps until it touches the edge of the stage or Rocks');\n    t.end();\n}"
    },
    {
      "name": "After moving power steps power is decreased by 0.25",
      "code": "const testPowerDecreaseAfterMove = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    let initialPower = t.getGlobalVariable('power');\n    await t.runUntil(() => t.getSprite('Snowball').isTouchingSprite('Rocks') || t.getSprite('Snowball').isTouchingEdge(), 10000);\n    t.assert.strictEqual(t.getGlobalVariable('power'), initialPower - 0.25, 'Power should decrease by 0.25 after moving power steps');\n    t.end();\n}"
    },
    {
      "name": "After Snowball touches the edge of the stage or Rocks it gets invisible",
      "code": "const testSnowballInvisibilityAfterTouch = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    await t.runUntil(() => t.getSprite('Snowball').isTouchingSprite('Rocks') || t.getSprite('Snowball').isTouchingEdge(), 10000);\n    await t.runForTime(1000);\n    t.assert.not(t.getSprite('Snowball').visible, 'Snowball should get invisible after touching the edge of the stage or Rocks');\n    t.end();\n}"
    },
    {
      "name": "After Snowball touches the edge of the stage or Rocks a new round starts",
      "code": "const testNewRoundAfterTouch = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    await t.runUntil(() => t.getSprite('Snowball').isTouchingSprite('Rocks') || t.getSprite('Snowball').isTouchingEdge(), 10000);\n    await t.runForTime(1000);\n    t.assert.strictEqual(t.getGlobalVariable('power'), 0, 'A new round should start after Snowball touches the edge of the stage or Rocks');\n    t.end();\n}"
    },
    {
      "name": "At the start of a round Reindeer goes to a random x coordinate between 0 and 200",
      "code": "const testReindeerRandomXAtStart = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runUntil(() => {\n        const reindeer = t.getSprite('Reindeer');\n        return reindeer.x >= 0 && reindeer.x <= 200;\n    }, 5000);\n    const reindeer = t.getSprite('Reindeer');\n    t.assert.greaterOrEqual(reindeer.x, 0, 'Reindeer x should be greater or equal to 0 at the start of a round');\n    t.assert.lessOrEqual(reindeer.x, 200, 'Reindeer x should be less or equal to 200 at the start of a round');\n    t.end();\n}"
    },
    {
      "name": "If Snowball touches Reindeer, Reindeer says 'You got me!' for 2 seconds",
      "code": "const testReindeerSaysYouGotMe = async function (t) {\n    t.seedScratch(1234);\n    t.greenFlag();\n    await t.runForTime(1000);\n    t.mouseDown(true);\n    await t.runUntil(() => t.getGlobalVariable('power') >= 20, 10000);\n    t.mouseDown(false);\n    await t.runUntil(() => t.getSprite('Snowball').isTouchingSprite('Reindeer'), 10000);\n    await t.runForTime(2000);\n    t.assert.strictEqual(t.getSprite('Reindeer').sayText, 'You got me!', 'Reindeer should say You got me! for 2 seconds if Snowball touches it');\n    t.end();\n}"
    }
  ]
}