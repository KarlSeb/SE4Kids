import json
import argparse
from typing import List, Optional

def extract_name(code:str) -> str:
    """
    Extracts the function name from the recieved code snippet and returns it.

    Arguments:
        code: The code generated by GPT -> str

    Return:
        Name of the function.
    """
    name = code.split('const ')[1]
    name = name.split(' ')[0]
    return name

def write_testfile(program_name: str, generated_json: str) -> None:
    """
    Reads the GPT generated code in JSON format and writes it into a JavaScript
    file that can be used as an input for Whisker. The generated file is then
    stored in /data/Tests/js/{program_name}_Tests.js.

    Arguments:
        program_name: Name of the program under test -> str
        generated_json: Tests generated by GPT in JSON format
    """
    data = json.loads(generated_json)
    export = {}
    with open(f'./data/Tests/js/{program_name}_Tests.js', 'w') as f:
        for item in data['tests']:
            test = item['code']
            name = extract_name(test)
            export[name] = item['name']
            f.write(test)
            f.write('\n'*2)

        f.write('module.exports = [\n')
        for name in export:
            f.write('\t{\n')
            f.write(f'\t\t test: {name},\n')
            f.write(f'\t\t name: "{name}",\n')
            f.write(f'\t\t description: "{export[name]}",\n')
            f.write(f'\t\t categories: []\n')
            f.write('\t},\n')
        f.write(']\n')

def get_names() -> List[str]:
    """
    Reads all the program names from the file 'program_names.txt' and returns
    a list of all names.

    Return:
        List of all names.
    """
    names = []
    with open('program_names.txt', 'r') as f:
        names = f.readlines()
    for i in range(len(names)):
        names[i] = names[i].strip()
    return names

def parse_command_line_inputs() -> Optional[List[str]]:
    """
    Parses the command line inputs and returns the specified names as a list.

    Return:
        A list of all specified names or None if no names were given as arguments.
    """
    parser = argparse.ArgumentParser(description='Processes the JSON into Javascript files for the programs specified')
    parser.add_argument('-n', '--names', action='extend', type=str, nargs='+', \
                        help='Names of the programs to test. If no names are given all names in program_names.txt are used instead')
    return parser.parse_args().names

def main() -> None:
    """
    Processes the GPT generated tests from JSON format into a Whisker test.
    """
    names = parse_command_line_inputs()
    if names is None:
        names = get_names()
    for program_name in names:
        json = ''
        with open(f'./data/Tests/JSON/{program_name}_Tests.json', 'r') as f:
            json = f.read()
        try:
            write_testfile(program_name, json)
        except Exception:
            print(f'Could not progress JSON for {program_name}!')
            continue

if __name__ == '__main__':
    main()
